{"version":3,"sources":["components/songs-pagination/style.js","components/songs-pagination/index.js","utils/handle-data.js","components/songs-cover/style.js","components/songs-cover/index.js","pages/discover/c-pages/songList/store/actionCreators.js","services/songList.js","pages/discover/c-pages/songList/c-cpns/songs-category/style.js","pages/discover/c-pages/songList/c-cpns/songs-category/index.js","pages/discover/c-pages/songList/c-cpns/songs-header/style.js","pages/discover/c-pages/songList/c-cpns/songs-header/index.js","pages/discover/c-pages/songList/c-cpns/songs-main/style.js","pages/discover/c-pages/songList/c-cpns/songs-main/index.js","pages/discover/c-pages/songList/style.js","pages/discover/c-pages/songList/index.js"],"names":["PaginationWrapper","styled","div","memo","props","currentPage","total","pageSize","onPageChange","className","size","current","defaultCurrent","showSizeChanger","itemRender","type","originalElement","onChange","handleSongsCategory","data","category","categories","categoryData","Object","entries","map","name","subs","sub","item","push","singerAlphas","alphabets","start","charCodeAt","last","i","String","fromCharCode","generateSingerAlpha","SongsCoverWrapper","right","info","by","creator","nickname","src","getSizeImage","picUrl","coverImgUrl","alt","getCount","playCount","changeCurrentCategoryAction","actionTypes","currentCategory","getSongCategoryAction","dispatch","request","url","then","res","cate","getSongCategoryListAction","page","getState","cat","offset","limit","params","getSongCategoryList","getIn","PER_PAGE_NUMBER","list","songList","SongsCategoryWrapper","useSelector","state","shallowEqual","useDispatch","selectCategory","onClick","e","index","value","SongsHeaderWrapper","HeaderLeftWrapper","HeaderRightWrapper","showCategory","setShowCategory","stopPropagation","SongsMainWrapper","useState","setCurrentPage","playlists","SongListWrapper","useEffect"],"mappings":"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","file":"static/js/7.313988d8.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const PaginationWrapper = styled.div`\n  .pagination {\n    margin: 30px 0;\n    text-align: center;\n\n    .control {\n      width: 69px;\n      height: 24px;\n      line-height: 22px;\n      text-align: center;\n      border: 1px solid #ccc;\n      border-radius: 2px;\n      margin: 0 5px;\n      color: #333;\n\n      &:disabled {\n        color: #999;\n      }\n    }\n\n    .ant-pagination-item {\n      border: 1px solid #ccc !important;\n      margin: 0 5px;\n      border-radius: 3px;\n\n      a {\n        font-size: 12px;\n      }\n\n      &.ant-pagination-item-active {\n        background-color: #c20c0c;\n        border-color: #A2161B;\n        a {\n          color: #fff;\n        }\n      }\n    }\n  }\n`","import React, { memo } from \"react\";\n\nimport { Pagination } from \"antd\";\nimport { PaginationWrapper } from \"./style\";\n\nexport default memo(function LJPagination(props) {\n  const { currentPage, total, pageSize, onPageChange } = props;\n\n  // handle function\n  // 修改页码的展示样式，“上一页”，“下一页”\n  function itemRender(current, type, originalElement) {\n    if (type === \"prev\") {\n      return <button className=\"control prev\"> &lt; 上一页</button>;\n    }\n    if (type === \"next\") {\n      return <button className=\"control next\">下一页 &gt;</button>;\n    }\n    return originalElement;\n  }\n\n  return (\n    <PaginationWrapper>\n      <Pagination\n        className=\"pagination\"\n        size=\"small\"\n        current={currentPage}\n        defaultCurrent={1}\n        total={total}\n        pageSize={pageSize}\n        showSizeChanger={false}\n        itemRender={itemRender}\n        onChange={onPageChange}\n      />\n    </PaginationWrapper>\n  );\n});\n","export function handleSongsCategory(data) {\n  // 1.获取所有的类别\n  const category = data.categories;\n  // category： {0: '语种', 1: '风格', 2: '场景', 3: '情感', 4: '主题'}\n\n  // 2.创建类别数据结构\n  //   2.1 entries 把category 对象转换为了可迭代的数组，成员是对象的 key / value 对\n  //     (5) [Array(2), Array(2), Array(2), Array(2), Array(2)]\n  //       0: (2) ['0', '语种']\n  //       1: (2) ['1', '风格']\n  //       2: (2) ['2', '场景']\n  //       3: (2) ['3', '情感']\n  //       4: (2) ['4', '主题']\n  //   2.2 利用 map 对数组进行改造，参数利用了解构赋值，提取出 key 和 value\n  const categoryData = Object.entries(category).map(([key, value]) => {\n    return {\n      name: value,\n      subs: [],\n    };\n  });\n  // categoryData\n  // (5) [{…}, {…}, {…}, {…}, {…}]\n  //   0: {name: '语种', subs: Array(5)}\n  //   1: {name: '风格', subs: Array(21)}\n  //   2: {name: '场景', subs: Array(12)}\n  //   3: {name: '情感', subs: Array(12)}\n  //   4: {name: '主题', subs: Array(18)}\n  //   length: 5\n\n  // 3.将subs添加到对应的类别中\n  for (let item of data.sub) {\n    categoryData[item.category].subs.push(item);\n  }\n\n  return categoryData;\n}\n\n// 获取歌手字母类别\n// return:  28) ['-1', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '0']\n// 开头的 -1 代表全部，结尾的 0 代表其他。\nexport function generateSingerAlpha() {\n  var alphabets = [\"-1\"];\n  var start = \"A\".charCodeAt(0);\n  var last = \"Z\".charCodeAt(0);\n  for (var i = start; i <= last; ++i) {\n    alphabets.push(String.fromCharCode(i));\n  }\n\n  alphabets.push(\"0\");\n  return alphabets;\n}\n\nexport const singerAlphas = generateSingerAlpha();\n","import styled from \"styled-components\";\n\nexport const SongsCoverWrapper = styled.div`\n  width: 140px;\n  margin: 20px ${(props) => props.right || 0} 20px 0;\n\n  .cover-top {\n    position: relative;\n\n    & > img {\n      width: 140px;\n      height: 140px;\n    }\n\n    .cover {\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      background-position: 0 0;\n      cursor: pointer;\n\n      .info {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 0 10px;\n        position: absolute;\n        bottom: 0;\n        left: 0;\n        right: 0;\n        background-position: 0 -537px;\n        color: #ccc;\n        height: 27px;\n\n        .erji {\n          margin-right: 5px;\n          display: inline-block;\n          width: 14px;\n          height: 11px;\n          background-position: 0 -24px;\n        }\n\n        .play {\n          display: inline-block;\n          width: 16px;\n          height: 17px;\n          background-position: 0 0;\n        }\n        .play:hover {\n          background-position: 0 -60px;\n        }\n      }\n    }\n  }\n\n  .cover-bottom {\n    font-size: 14px;\n    color: #000;\n    margin-top: 5px;\n  }\n\n  .cover-source {\n    color: #666;\n  }\n`;\n","import React, { memo } from \"react\";\n\nimport { getCount, getSizeImage } from \"@/utils/format-utils\";\n\nimport { SongsCoverWrapper } from \"./style\";\n\nexport default memo(function LJSongsCover(props) {\n  const { info, right, size } = props;\n\n  let by = \"by 热门推荐\";\n  if (info.creator && info.creator.nickname) {\n    by = `by ${info.creator.nickname}`;\n  }\n\n  return (\n    <SongsCoverWrapper right={right}>\n      <div className=\"cover-top\">\n        <img\n          src={getSizeImage(info.picUrl ? info.picUrl : info.coverImgUrl, size)}\n          alt={info.name}\n        />\n        <div className=\"cover sprite_cover\">\n          <div className=\"info sprite_cover\">\n            <span>\n              <i className=\"sprite_icon erji\"></i>\n              {getCount(info.playCount)}\n            </span>\n            <i className=\"sprite_icon play\"></i>\n          </div>\n        </div>\n      </div>\n      <div className=\"cover-bottom text-nowrap\">{info.name}</div>\n      <div className=\"cover-source\">{by}</div>\n    </SongsCoverWrapper>\n  );\n});\n","import * as actionTypes from \"./constants\";\nimport { PER_PAGE_NUMBER } from \"@/common/contants\";\n\nimport { getSongCategoryList, getSongCategory } from \"@/services/songList\";\nimport { handleSongsCategory } from \"@/utils/handle-data\";\n// 不暴露，内部action\nconst changeCategoryAction = (cate) => ({\n  type: actionTypes.CHANGE_CATEGORY,\n  category: cate,\n});\n\nconst changeSongListAction = (list) => ({\n  type: actionTypes.CHANGE_SONG_LIST,\n  songList: list,\n});\n\n// 暴露，异步action\n// 当前展示的歌单类名\nexport const changeCurrentCategoryAction = (name) => ({\n  type: actionTypes.CHANGE_CURRENT_CATEGORY,\n  currentCategory: name,\n});\n\n// 全部歌单类名\nexport const getSongCategoryAction = () => {\n  return (dispatch) => {\n    getSongCategory().then((res) => {\n      dispatch(changeCategoryAction(handleSongsCategory(res)));\n    });\n  };\n};\n\n// 当前展示的歌单内容\nexport const getSongCategoryListAction = (page) => {\n  return (dispatch, getState) => {\n    // 获取歌单类名 currentCategory\n    const name = getState().getIn([\"songList\", \"currentCategory\"]);\n\n    getSongCategoryList(name, page * PER_PAGE_NUMBER).then((res) => {\n      dispatch(changeSongListAction(res));\n    });\n  };\n};\n","import request from \"./request\";\n\nexport function getSongCategory() {\n  return request({\n    url: \"/playlist/catlist\",\n  });\n}\n\nexport function getSongCategoryList(cat = \"全部\", offset = 0, limit = 35) {\n  return request({\n    url: \"/top/playlist\",\n    params: {\n      cat,\n      limit,\n      offset,\n    },\n  });\n}\n","import styled from \"styled-components\";\n\nexport const SongsCategoryWrapper = styled.div`\n  position: absolute;\n  z-index: 99;\n  top: 50px;\n  left: -30px;\n  width: 700px;\n  border: 1px solid #ccc;\n  background-color: #fefefe;\n  /* 模仿发光效果 */\n  box-shadow: 0 0 10px 2px #d3d3d3;\n  border-radius: 5px;\n  padding-top: 10px;\n\n  .arrow {\n    position: absolute;\n    top: -11px;\n    left: 120px;\n    width: 24px;\n    height: 11px;\n    background-position: -48px 0;\n  }\n\n  .all {\n    padding: 10px 25px;\n    border-bottom: 1px solid #e2e2e2;\n    .link {\n      display: inline-block;\n      text-align: center;\n      width: 75px;\n      height: 26px;\n      line-height: 26px;\n      border: 1px solid #d3d3d3;\n      border-radius: 3px;\n      background-color: #fafafa;\n    }\n  }\n\n  .category {\n    padding-left: 25px;\n    dl {\n      display: flex;\n      align-items: flex-start;\n    }\n\n    dt {\n      display: inline-flex;\n      align-items: center;\n      padding: 15px 0 5px;\n      width: 70px;\n      text-align: center;\n      font-weight: bold;\n\n      i {\n        display: inline-block;\n        width: 24px;\n        height: 24px;\n        background-position: -20px -735px;\n        margin-right: 8px;\n      }\n    }\n\n    dl.item1 {\n      i {\n        background-position: 0 -60px;\n      }\n    }\n\n    dl.item2 {\n      i {\n        background-position: 0 -88px;\n      }\n    }\n\n    dl.item3 {\n      i {\n        background-position: 0 -117px;\n      }\n    }\n\n    dl.item4 {\n      i {\n        background-position: 0 -141px;\n      }\n\n      dd {\n        padding-bottom: 25px;\n      }\n    }\n\n    dd {\n      padding-top: 18px;\n      padding-left: 15px;\n      flex: 1;\n      display: flex;\n      flex-wrap: wrap;\n      border-left: 1px solid #e2e2e2;\n\n      .item {\n        margin-bottom: 6px;\n      }\n\n      a {\n        color: #333;\n      }\n\n      .divider {\n        margin: 0 11px;\n        color: #e2e2e2;\n      }\n    }\n  }\n`;\n","import React, { memo } from \"react\";\nimport { useSelector, useDispatch, shallowEqual } from \"react-redux\";\n\nimport {\n  changeCurrentCategoryAction,\n  getSongCategoryListAction,\n} from \"../../store/actionCreators\";\n\nimport { SongsCategoryWrapper } from \"./style\";\n\nexport default memo(function LJSongsCategory() {\n  // redux hooks\n  const { category } = useSelector(\n    (state) => ({\n      category: state.getIn([\"songList\", \"category\"]),\n    }),\n    shallowEqual\n  );\n  const dispatch = useDispatch();\n\n  // other handle\n  // 当点击风格名称后:\n  //   1. 改变CurrentCategory名称，\n  //   2. 改变下方展示的内容，展示最开始的第\"0\"页。\n  const selectCategory = (name) => {\n    dispatch(changeCurrentCategoryAction(name));\n    dispatch(getSongCategoryListAction(0));\n  };\n\n  return (\n    <SongsCategoryWrapper>\n      <div className=\"arrow sprite_icon\"></div>\n      <div className=\"all\">\n        <span className=\"link\" onClick={(e) => selectCategory(\"全部\")}>\n          全部风格\n        </span>\n      </div>\n      <div className=\"category\">\n        {category.map((item, index) => {\n          return (\n            <dl key={item.name} className={\"item\" + index}>\n              <dt>\n                <i className=\"icon sprite_icon2\"></i>\n                <span>{item.name}</span>\n              </dt>\n              <dd>\n                {item.subs.map((value) => {\n                  return (\n                    <div className=\"item\" key={value.name}>\n                      <span\n                        className=\"link\"\n                        onClick={(e) => selectCategory(value.name)}\n                      >\n                        {value.name}\n                      </span>\n                      <span className=\"divider\">|</span>\n                    </div>\n                  );\n                })}\n              </dd>\n            </dl>\n          );\n        })}\n      </div>\n    </SongsCategoryWrapper>\n  );\n});\n","import styled from \"styled-components\";\n\nexport const SongsHeaderWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-bottom: 2px solid #c20c0c;\n  padding-bottom: 6px;\n  margin-bottom: 10px;\n`;\n\nexport const HeaderLeftWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  position: relative;\n  .title {\n    font-size: 24px;\n    font-family: \"Microsoft Yahei\", Arial, Helvetica, sans-serif;\n  }\n\n  .select {\n    position: relative;\n    top: 2px;\n    width: 91px;\n    height: 31px;\n    line-height: 31px;\n    background-color: #fafafa;\n    border: 1px solid #d3d3d3;\n    border-radius: 3px;\n    color: #0c73c2;\n    margin-left: 10px;\n    cursor: pointer;\n    &:hover {\n      background-color: #fff;\n    }\n\n    i {\n      position: relative;\n      left: 5px;\n      bottom: 2px;\n      display: inline-block;\n      width: 8px;\n      height: 5px;\n      background-position: -70px -543px;\n    }\n  }\n\n  .category {\n    display: block;\n    .cover {\n      position: fixed;\n      left: 0;\n      right: 0;\n      top: 105px;\n      bottom: 0;\n      background-color: rgba(0, 0, 0, 0.05);\n    }\n  }\n`;\n\nexport const HeaderRightWrapper = styled.div`\n  .hot {\n    width: 46px;\n    height: 29px;\n    background-color: #c20c0c;\n    color: #fff;\n    border-radius: 3px;\n    border: 1px solid #aaa;\n  }\n`;\n","import React, { memo } from \"react\";\nimport { useSelector, shallowEqual } from \"react-redux\";\n\nimport LJSongsCategory from \"../songs-category\";\n\nimport {\n  SongsHeaderWrapper,\n  HeaderLeftWrapper,\n  HeaderRightWrapper,\n} from \"./style\";\nexport default memo(function LJSongsHeader(props) {\n  // props\n  // const [showCategory, setShowCategory] = useState(false);\n  const { showCategory, setShowCategory } = props;\n\n  // redux hooks\n  const { currentCategory } = useSelector(\n    (state) => ({\n      currentCategory: state.getIn([\"songList\", \"currentCategory\"]),\n    }),\n    shallowEqual\n  );\n\n  return (\n    <SongsHeaderWrapper>\n      <HeaderLeftWrapper>\n        <span className=\"title\">{currentCategory}</span>\n        <button\n          className=\"select\"\n          onClick={(e) => {\n            e.stopPropagation();\n            setShowCategory(!showCategory);\n          }}\n        >\n          <span>选择分类</span>\n          <i className=\"sprite_icon2\"></i>\n        </button>\n        {showCategory ? <LJSongsCategory /> : null}\n      </HeaderLeftWrapper>\n      <HeaderRightWrapper>\n        <button className=\"hot\">热门</button>\n      </HeaderRightWrapper>\n    </SongsHeaderWrapper>\n  );\n});\n","import styled from \"styled-components\";\n\nexport const SongsMainWrapper = styled.div`\n  .songs-list {\n    display: flex;\n    /* flex 元素实现多行排列 */\n    flex-wrap: wrap;\n    justify-content: space-between;\n    margin-right: -30px;\n  }\n`;\n","import React, { useState, memo } from \"react\";\nimport { useSelector, useDispatch, shallowEqual } from \"react-redux\";\n\nimport { PER_PAGE_NUMBER } from \"@/common/contants\";\nimport { getSongCategoryListAction } from \"../../store/actionCreators\";\n\nimport LJSongsCover from \"@/components/songs-cover\";\nimport LJPagination from \"@/components/songs-pagination\";\nimport { SongsMainWrapper } from \"./style\";\nexport default memo(function LJSongsMain() {\n  // props\n  // 记录当前的页数\n  const [currentPage, setCurrentPage] = useState(1);\n\n  // redux hoooks\n  const {\n    songList: { total = 0, playlists = [] },\n  } = useSelector(\n    (state) => ({\n      songList: state.getIn([\"songList\", \"songList\"]),\n    }),\n    shallowEqual\n  );\n  const dispatch = useDispatch();\n\n  // handle function\n  // 子数组通信，改变展示歌单的页数。\n  function onPageChange(page) {\n    setCurrentPage(page);\n    dispatch(getSongCategoryListAction(page));\n  }\n\n  return (\n    <SongsMainWrapper>\n      <div className=\"songs-list\">\n        {playlists.map((item, index) => {\n          return <LJSongsCover info={item} key={index} right=\"30px\" />;\n        })}\n      </div>\n      <LJPagination\n        currentPage={currentPage}\n        total={total}\n        pageSize={PER_PAGE_NUMBER}\n        onPageChange={onPageChange}\n      />\n    </SongsMainWrapper>\n  );\n});\n","import styled from \"styled-components\";\n\nexport const SongListWrapper = styled.div`\n  padding: 35px 40px;\n  border: 1px solid #d3d3d3;\n  border-width: 0 1px;\n  background-color: #fff;\n`;\n","import React, { memo, useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport {\n  getSongCategoryAction,\n  getSongCategoryListAction,\n  changeCurrentCategoryAction,\n} from \"./store/actionCreators\";\n\nimport LJSongsHeader from \"./c-cpns/songs-header\";\nimport LJSongsMain from \"./c-cpns/songs-main\";\n\nimport { SongListWrapper } from \"./style\";\nexport default memo(function LJSongList() {\n  // state\n  const [showCategory, setShowCategory] = useState(false);\n\n  // redux hooks\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    // 全部歌单类名\n    dispatch(getSongCategoryAction());\n    // 展示初始内容\n    dispatch(getSongCategoryListAction(0));\n    // 最初的菜单是“全部歌单”\n    dispatch(changeCurrentCategoryAction(\"全部\"));\n  }, [dispatch]);\n\n  return (\n    <SongListWrapper\n      className=\"wrap-v2\"\n      onClick={(e) => {\n        setShowCategory(false);\n      }}\n    >\n      <LJSongsHeader\n        showCategory={showCategory}\n        setShowCategory={setShowCategory}\n      />\n      <LJSongsMain />\n    </SongListWrapper>\n  );\n});\n"],"sourceRoot":""}