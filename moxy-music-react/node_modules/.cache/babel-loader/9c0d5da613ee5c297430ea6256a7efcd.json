{"ast":null,"code":"var _jsxFileName = \"/Users/moxy/ReactTea/moxy-music-react/src/pages/player/app-player-bar/c-cpns/app-player-panel/c-cnps/player-list/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { memo } from \"react\";\nimport { useSelector, shallowEqual } from \"react-redux\";\nimport classNames from \"classnames\";\nimport { formatMinuteSecond } from \"@/utils/format-utils\";\nimport { PlayerListWrapper } from \"./style\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default _c2 = /*#__PURE__*/memo(_c = _s(function LJPlayerList() {\n  _s();\n\n  const {\n    playList,\n    currentSongIndex\n  } = useSelector(state => ({\n    playList: state.getIn([\"player\", \"playList\"]),\n    currentSongIndex: state.getIn([\"player\", \"currentSongIndex\"])\n  }), shallowEqual);\n  return /*#__PURE__*/_jsxDEV(PlayerListWrapper, {\n    children: // classnames:可以给元素动态添加 class 类名，\n    // 如果属性值为true则为其添加该类名;如果值为false，则不添加。\n    playList.map((item, index) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        // 动态添加 play-item，如果 currentSongIndex==index\n        className: classNames(\"play-item\", {\n          active: currentSongIndex === index\n        }),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"left\",\n          children: item.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"right\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"singer text-nowrap\",\n            children: item.ar[0].name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"duration\",\n            children: formatMinuteSecond(item.dt)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"sprite_playlist link\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 15\n        }, this)]\n      }, item.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n}, \"z4stuHRFno7kA+wfnXfxn3hCA5o=\", false, function () {\n  return [useSelector];\n}));\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"%default%$memo\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/moxy/ReactTea/moxy-music-react/src/pages/player/app-player-bar/c-cpns/app-player-panel/c-cnps/player-list/index.js"],"names":["React","memo","useSelector","shallowEqual","classNames","formatMinuteSecond","PlayerListWrapper","LJPlayerList","playList","currentSongIndex","state","getIn","map","item","index","active","name","ar","dt","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,QAA4B,OAA5B;AACA,SAASC,WAAT,EAAsBC,YAAtB,QAA0C,aAA1C;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,SAASC,kBAAT,QAAmC,sBAAnC;AAEA,SAASC,iBAAT,QAAkC,SAAlC;;AAEA,kCAAeL,IAAI,SAAC,SAASM,YAAT,GAAwB;AAAA;;AAC1C,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAiCP,WAAW,CAC/CQ,KAAD,KAAY;AACVF,IAAAA,QAAQ,EAAEE,KAAK,CAACC,KAAN,CAAY,CAAC,QAAD,EAAW,UAAX,CAAZ,CADA;AAEVF,IAAAA,gBAAgB,EAAEC,KAAK,CAACC,KAAN,CAAY,CAAC,QAAD,EAAW,kBAAX,CAAZ;AAFR,GAAZ,CADgD,EAKhDR,YALgD,CAAlD;AAOA,sBACE,QAAC,iBAAD;AAAA,cAEI;AACA;AACAK,IAAAA,QAAQ,CAACI,GAAT,CAAa,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC5B,0BACE;AAEE;AACA,QAAA,SAAS,EAAEV,UAAU,CAAC,WAAD,EAAc;AACjCW,UAAAA,MAAM,EAAEN,gBAAgB,KAAKK;AADI,SAAd,CAHvB;AAAA,gCAOE;AAAK,UAAA,SAAS,EAAC,MAAf;AAAA,oBAAuBD,IAAI,CAACG;AAA5B;AAAA;AAAA;AAAA;AAAA,gBAPF,eAQE;AAAK,UAAA,SAAS,EAAC,OAAf;AAAA,kCACE;AAAM,YAAA,SAAS,EAAC,oBAAhB;AAAA,sBAAsCH,IAAI,CAACI,EAAL,CAAQ,CAAR,EAAWD;AAAjD;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAM,YAAA,SAAS,EAAC,UAAhB;AAAA,sBAA4BX,kBAAkB,CAACQ,IAAI,CAACK,EAAN;AAA9C;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE;AAAM,YAAA,SAAS,EAAC;AAAhB;AAAA;AAAA;AAAA;AAAA,kBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,gBARF;AAAA,SACOL,IAAI,CAACM,EADZ;AAAA;AAAA;AAAA;AAAA,cADF;AAgBD,KAjBD;AAJJ;AAAA;AAAA;AAAA;AAAA,UADF;AA0BD,CAlCkB;AAAA,UACsBjB,WADtB;AAAA,GAAnB","sourcesContent":["import React, { memo } from \"react\";\nimport { useSelector, shallowEqual } from \"react-redux\";\nimport classNames from \"classnames\";\n\nimport { formatMinuteSecond } from \"@/utils/format-utils\";\n\nimport { PlayerListWrapper } from \"./style\";\n\nexport default memo(function LJPlayerList() {\n  const { playList, currentSongIndex } = useSelector(\n    (state) => ({\n      playList: state.getIn([\"player\", \"playList\"]),\n      currentSongIndex: state.getIn([\"player\", \"currentSongIndex\"]),\n    }),\n    shallowEqual\n  );\n  return (\n    <PlayerListWrapper>\n      {\n        // classnames:可以给元素动态添加 class 类名，\n        // 如果属性值为true则为其添加该类名;如果值为false，则不添加。\n        playList.map((item, index) => {\n          return (\n            <div\n              key={item.id}\n              // 动态添加 play-item，如果 currentSongIndex==index\n              className={classNames(\"play-item\", {\n                active: currentSongIndex === index,\n              })}\n            >\n              <div className=\"left\">{item.name}</div>\n              <div className=\"right\">\n                <span className=\"singer text-nowrap\">{item.ar[0].name}</span>\n                <span className=\"duration\">{formatMinuteSecond(item.dt)}</span>\n                <span className=\"sprite_playlist link\"></span>\n              </div>\n            </div>\n          );\n        })\n      }\n    </PlayerListWrapper>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}