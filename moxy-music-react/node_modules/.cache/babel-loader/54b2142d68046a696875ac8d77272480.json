{"ast":null,"code":"import _toConsumableArray from\"/Users/moxy/ReactTea/moxy-music-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import*as actionTypes from\"./constants\";import{getSongDetail,getLyric,getSimiPlaylist,getSimiSong}from\"@/services/player\";import{getRandomNumber}from\"@/utils/math-utils\";import{parseLyric}from\"@/utils/parse-lyric\";// 不对外暴露的区域\nvar changeCurrentSongAction=function changeCurrentSongAction(res){return{type:actionTypes.CHANGE_CURRENT_SONG,currentSong:res};};var changePlayListAction=function changePlayListAction(playList){return{type:actionTypes.CHANGE_PLAY_LIST,playList:playList};};var changeCurrentSongIndexAction=function changeCurrentSongIndexAction(index){return{type:actionTypes.CHANGE_CURRENT_SONG_INDEX,index:index};};// 把歌词添加到 store 中\nvar changelyricListAction=function changelyricListAction(lyricList){return{type:actionTypes.CHANGE_LYRIC_LIST,lyricList:lyricList};};// 网络请求：相似推荐\nvar changeSimiPlaylistAction=function changeSimiPlaylistAction(res){return{type:actionTypes.CHANGE_SIMI_PLAYLIST,simiPlaylist:res.playlists};};var changeSimiSongsAction=function changeSimiSongsAction(res){return{type:actionTypes.CHANGE_SIMI_SONGS,simiSongs:res.songs};};// 对外暴露的区域\nexport var changeSequenceAction=function changeSequenceAction(sequence){return{type:actionTypes.CHANGE_SEQUENCE,sequence:sequence};};// 上一首，下一首 的切换，采用异步action方式\nexport var changeSongPlayerAction=function changeSongPlayerAction(tag){return function(dispatch,getState){var playList=getState().getIn([\"player\",\"playList\"]);var sequence=getState().getIn([\"player\",\"sequence\"]);var currentSongIndex=getState().getIn([\"player\",\"currentSongIndex\"]);switch(sequence){case 1:// 随机播放\nvar randomIndex=getRandomNumber(playList.length);while(randomIndex===currentSongIndex){randomIndex=getRandomNumber(playList.length);}currentSongIndex=randomIndex;break;default:// 其他播放\ncurrentSongIndex+=tag;if(currentSongIndex>=playList.length)currentSongIndex=0;if(currentSongIndex<0)currentSongIndex=playList.length-1;break;}var currentSong=playList[currentSongIndex];dispatch(changeCurrentSongAction(currentSong));dispatch(changeCurrentSongIndexAction(currentSongIndex));// 请求该歌曲的歌词\ndispatch(getLyricAction(currentSong.id));};};// 添加歌曲/第一次打开页面时，获取歌曲信息\nexport var getSongDetailAction=function getSongDetailAction(idx){return function(dispatch,getState){// 1.根据ids查找playList中是否已经有该歌曲\nvar playList=getState().getIn([\"player\",\"playList\"]);var songIndex=playList.findIndex(function(item){return item.id===idx;});// 2.判断是否找到歌曲\n// 如果返回的是大于0的下标，则表明找到了。\nif(songIndex!==-1){dispatch(changeCurrentSongIndexAction(songIndex));var song=playList[songIndex];console.log(song);dispatch(changeCurrentSongAction(song));// 3 请求该歌曲的歌词\ndispatch(getLyricAction(song.id));}else{// 如果返回的是-1，则表明没找到，则请求歌曲\ngetSongDetail(idx).then(function(res){// res.songs && 防止 songs 是 undefined\nvar song=res.songs&&res.songs[0];// !song 防止 song 是 undefined，如果是 undefined什么也不做，直接结束执行\nif(!song)return;// 1.将最新请求的歌曲添加到播放列表中\nvar newPlayList=_toConsumableArray(playList);newPlayList.push(song);// 2.更新redux中的值\ndispatch(changePlayListAction(newPlayList));dispatch(changeCurrentSongIndexAction(newPlayList.length-1));dispatch(changeCurrentSongAction(song));// 3 请求该歌曲的歌词\ndispatch(getLyricAction(song.id));});}};};// 对应 id 的获取歌词\nexport var getLyricAction=function getLyricAction(id){return function(dispatch){getLyric(id).then(function(res){var lyric=res.lrc.lyric;var lyricList=parseLyric(lyric);dispatch(changelyricListAction(lyricList));});};};// 记录当前歌词的下标\nexport var changeCurrentLyricIndexAction=function changeCurrentLyricIndexAction(currentLyricIndex){return{type:actionTypes.CHANGE_CURRENT_LYRIC_INDEX,currentLyricIndex:currentLyricIndex};};// 控制音量\nexport var changePlayerVolumeAction=function changePlayerVolumeAction(volume){return{type:actionTypes.CHANGE_PLAYER_VOLUME,volume:volume};};// 播放页面的相似推荐\nexport var getSimiPlaylistAction=function getSimiPlaylistAction(){return function(dispatch,getState){var id=getState().getIn([\"player\",\"currentSong\"]).id;if(!id)return;getSimiPlaylist(id).then(function(res){dispatch(changeSimiPlaylistAction(res));});};};export var getSimiSongAction=function getSimiSongAction(){return function(dispatch,getState){var id=getState().getIn([\"player\",\"currentSong\"]).id;if(!id)return;getSimiSong(id).then(function(res){dispatch(changeSimiSongsAction(res));});};};","map":{"version":3,"sources":["/Users/moxy/ReactTea/moxy-music-react/src/pages/player/store/actionCreators.js"],"names":["actionTypes","getSongDetail","getLyric","getSimiPlaylist","getSimiSong","getRandomNumber","parseLyric","changeCurrentSongAction","res","type","CHANGE_CURRENT_SONG","currentSong","changePlayListAction","playList","CHANGE_PLAY_LIST","changeCurrentSongIndexAction","index","CHANGE_CURRENT_SONG_INDEX","changelyricListAction","lyricList","CHANGE_LYRIC_LIST","changeSimiPlaylistAction","CHANGE_SIMI_PLAYLIST","simiPlaylist","playlists","changeSimiSongsAction","CHANGE_SIMI_SONGS","simiSongs","songs","changeSequenceAction","sequence","CHANGE_SEQUENCE","changeSongPlayerAction","tag","dispatch","getState","getIn","currentSongIndex","randomIndex","length","getLyricAction","id","getSongDetailAction","idx","songIndex","findIndex","item","song","console","log","then","newPlayList","push","lyric","lrc","changeCurrentLyricIndexAction","currentLyricIndex","CHANGE_CURRENT_LYRIC_INDEX","changePlayerVolumeAction","volume","CHANGE_PLAYER_VOLUME","getSimiPlaylistAction","getSimiSongAction"],"mappings":"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","sourcesContent":["import * as actionTypes from \"./constants\";\n\nimport {\n  getSongDetail,\n  getLyric,\n  getSimiPlaylist,\n  getSimiSong,\n} from \"@/services/player\";\nimport { getRandomNumber } from \"@/utils/math-utils\";\nimport { parseLyric } from \"@/utils/parse-lyric\";\n\n// 不对外暴露的区域\nconst changeCurrentSongAction = (res) => ({\n  type: actionTypes.CHANGE_CURRENT_SONG,\n  currentSong: res,\n});\n\nconst changePlayListAction = (playList) => ({\n  type: actionTypes.CHANGE_PLAY_LIST,\n  playList,\n});\n\nconst changeCurrentSongIndexAction = (index) => ({\n  type: actionTypes.CHANGE_CURRENT_SONG_INDEX,\n  index,\n});\n\n// 把歌词添加到 store 中\nconst changelyricListAction = (lyricList) => ({\n  type: actionTypes.CHANGE_LYRIC_LIST,\n  lyricList,\n});\n\n// 网络请求：相似推荐\nconst changeSimiPlaylistAction = (res) => ({\n  type: actionTypes.CHANGE_SIMI_PLAYLIST,\n  simiPlaylist: res.playlists,\n});\n\nconst changeSimiSongsAction = (res) => ({\n  type: actionTypes.CHANGE_SIMI_SONGS,\n  simiSongs: res.songs,\n});\n\n// 对外暴露的区域\nexport const changeSequenceAction = (sequence) => ({\n  type: actionTypes.CHANGE_SEQUENCE,\n  sequence,\n});\n\n// 上一首，下一首 的切换，采用异步action方式\nexport const changeSongPlayerAction = (tag) => {\n  return (dispatch, getState) => {\n    const playList = getState().getIn([\"player\", \"playList\"]);\n    const sequence = getState().getIn([\"player\", \"sequence\"]);\n    let currentSongIndex = getState().getIn([\"player\", \"currentSongIndex\"]);\n    switch (sequence) {\n      case 1: // 随机播放\n        let randomIndex = getRandomNumber(playList.length);\n        while (randomIndex === currentSongIndex) {\n          randomIndex = getRandomNumber(playList.length);\n        }\n        currentSongIndex = randomIndex;\n        break;\n      default:\n        // 其他播放\n        currentSongIndex += tag;\n        if (currentSongIndex >= playList.length) currentSongIndex = 0;\n        if (currentSongIndex < 0) currentSongIndex = playList.length - 1;\n        break;\n    }\n    const currentSong = playList[currentSongIndex];\n    dispatch(changeCurrentSongAction(currentSong));\n    dispatch(changeCurrentSongIndexAction(currentSongIndex));\n\n    // 请求该歌曲的歌词\n    dispatch(getLyricAction(currentSong.id));\n  };\n};\n\n// 添加歌曲/第一次打开页面时，获取歌曲信息\nexport const getSongDetailAction = (idx) => {\n  return (dispatch, getState) => {\n    // 1.根据ids查找playList中是否已经有该歌曲\n    const playList = getState().getIn([\"player\", \"playList\"]);\n    const songIndex = playList.findIndex((item) => item.id === idx);\n\n    // 2.判断是否找到歌曲\n    // 如果返回的是大于0的下标，则表明找到了。\n    if (songIndex !== -1) {\n      dispatch(changeCurrentSongIndexAction(songIndex));\n      const song = playList[songIndex];\n      console.log(song);\n      dispatch(changeCurrentSongAction(song));\n\n      // 3 请求该歌曲的歌词\n      dispatch(getLyricAction(song.id));\n    } else {\n      // 如果返回的是-1，则表明没找到，则请求歌曲\n      getSongDetail(idx).then((res) => {\n        // res.songs && 防止 songs 是 undefined\n        const song = res.songs && res.songs[0];\n        // !song 防止 song 是 undefined，如果是 undefined什么也不做，直接结束执行\n        if (!song) return;\n        // 1.将最新请求的歌曲添加到播放列表中\n        const newPlayList = [...playList];\n        newPlayList.push(song);\n\n        // 2.更新redux中的值\n        dispatch(changePlayListAction(newPlayList));\n        dispatch(changeCurrentSongIndexAction(newPlayList.length - 1));\n        dispatch(changeCurrentSongAction(song));\n\n        // 3 请求该歌曲的歌词\n        dispatch(getLyricAction(song.id));\n      });\n    }\n  };\n};\n\n// 对应 id 的获取歌词\nexport const getLyricAction = (id) => {\n  return (dispatch) => {\n    getLyric(id).then((res) => {\n      const lyric = res.lrc.lyric;\n      const lyricList = parseLyric(lyric);\n      dispatch(changelyricListAction(lyricList));\n    });\n  };\n};\n\n// 记录当前歌词的下标\nexport const changeCurrentLyricIndexAction = (currentLyricIndex) => ({\n  type: actionTypes.CHANGE_CURRENT_LYRIC_INDEX,\n  currentLyricIndex,\n});\n\n// 控制音量\nexport const changePlayerVolumeAction = (volume) => ({\n  type: actionTypes.CHANGE_PLAYER_VOLUME,\n  volume,\n});\n\n// 播放页面的相似推荐\nexport const getSimiPlaylistAction = () => {\n  return (dispatch, getState) => {\n    const id = getState().getIn([\"player\", \"currentSong\"]).id;\n    if (!id) return;\n\n    getSimiPlaylist(id).then((res) => {\n      dispatch(changeSimiPlaylistAction(res));\n    });\n  };\n};\n\nexport const getSimiSongAction = () => {\n  return (dispatch, getState) => {\n    const id = getState().getIn([\"player\", \"currentSong\"]).id;\n    if (!id) return;\n\n    getSimiSong(id).then((res) => {\n      dispatch(changeSimiSongsAction(res));\n    });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}