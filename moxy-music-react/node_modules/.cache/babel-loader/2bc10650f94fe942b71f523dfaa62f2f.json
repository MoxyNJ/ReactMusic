{"ast":null,"code":"var _jsxFileName = \"F:\\\\ReactTea\\\\moxy-music-react\\\\src\\\\pages\\\\player\\\\app-player-bar\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { memo, useState, useEffect, useRef, useCallback } from \"react\";\nimport { useDispatch, useSelector, shallowEqual } from \"react-redux\";\nimport { NavLink } from \"react-router-dom\";\nimport { Slider, message } from \"antd\";\nimport LJPlayerVolume from \"./c-cpns/app-player-volume\";\nimport LJPlayerPanel from \"./c-cpns/app-player-panel\";\nimport { getSizeImage, formatDate, getPlayUrl } from \"@/utils/format-utils\";\nimport { getSongDetailAction, changeSequenceAction, changeSongPlayerAction, changeCurrentLyricIndexAction, changePlayerVolumeAction } from \"../store/actionCreators\";\nimport { PlaybarWrapper, Control, PlayInfo, Operator } from \"./style\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default _c2 = /*#__PURE__*/memo(_c = _s(function LJAppPlayBar() {\n  _s();\n\n  // component state：      组件内部的state\n  const [currentTime, setCurrentTime] = useState(0);\n  const [progress, setProgress] = useState(0);\n  const [isChanging, setIsChanging] = useState(false);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [showVolume, setShowVolume] = useState(false);\n  const [showPanel, setShowPanel] = useState(false); // redux hooks：          获取state和dispatch\n\n  const {\n    currentSong,\n    sequence,\n    lyricList,\n    currentLyricIndex\n  } = useSelector(state => ({\n    currentSong: state.getIn([\"player\", \"currentSong\"]),\n    sequence: state.getIn([\"player\", \"sequence\"]),\n    lyricList: state.getIn([\"player\", \"lyricList\"]),\n    currentLyricIndex: state.getIn([\"player\", \"currentLyricIndex\"])\n  }), shallowEqual);\n  const dispatch = useDispatch();\n  const audioRef = useRef(); // other hooks：          react的hooks\n\n  useEffect(() => {\n    dispatch(getSongDetailAction(1858069368));\n  }, [dispatch]);\n  useEffect(() => {\n    audioRef.current.src = getPlayUrl(currentSong.id); // 自动播放\n\n    audioRef.current.play().then(res => {\n      setIsPlaying(true);\n    }).catch(err => {\n      setIsPlaying(false);\n    });\n  }, [currentSong.id]); // other function：       组件内部的其他逻辑\n  // 判断如果有值，才会去值，否则为 undefined。防止报，且可以一个默认值，这里就没给了。\n\n  const picUrl = currentSong.al && currentSong.al.picUrl || \"\";\n  const songName = currentSong.name || \"未知歌曲\";\n  const singerName = currentSong.ar && currentSong.ar[0].name || \"未知歌手\";\n  const duration = currentSong.dt || 0;\n  const showDuration = formatDate(duration, \"mm:ss\");\n  const showCurrentTime = formatDate(currentTime * 1000, \"mm:ss\"); //handle function\n  // 播放逻辑\n\n  const playMusic = useCallback(() => {\n    isPlaying ? audioRef.current.pause() : audioRef.current.play();\n    setIsPlaying(!isPlaying);\n  }, [isPlaying]); // 播放条上的当前时间\n\n  const timeUpdate = e => {\n    const time = e.target.currentTime;\n\n    if (!isChanging) {\n      setCurrentTime(time);\n      setProgress(currentTime * 1000 / duration * 100);\n    } // 获取当前时间的歌词\n\n\n    let i = 0;\n\n    for (; i < lyricList.length; i++) {\n      let lyricItem = lyricList[i]; // console.log(Ntime, \"@\", lyricItem.time, \"%\");\n\n      if (time * 1000 < lyricItem.time) {\n        break;\n      }\n    } // console.log(lyricList[i - 1]);\n\n\n    if (currentLyricIndex !== i - 1) {\n      dispatch(changeCurrentLyricIndexAction(i - 1)); // 防止 i-1 为 -1， 取不到值而报错\n\n      const content = lyricList[i - 1] && lyricList[i - 1].content;\n      message.open({\n        key: \"lyric\",\n        content,\n        duration: 0\n      });\n    }\n  }; // Slider是一个组定义组件，要往里面传递参数的时候，使用useCallback嵌套回调函数的时候，防止频繁重新定义\n  // 按下\n\n\n  const sliderChange = useCallback(value => {\n    const time = value / 100 * duration / 1000;\n    setProgress(value);\n    setCurrentTime(time);\n    setIsChanging(true);\n  }, [duration]); // 松开\n\n  const sliderAfterChange = useCallback(value => {\n    const time = value / 100 * duration / 1000;\n    audioRef.current.currentTime = time;\n    setCurrentTime(time);\n    setIsChanging(false);\n    if (!isPlaying) playMusic();\n  }, [duration, isPlaying, playMusic]); // 控制循环单曲随机播放\n\n  const changeSequence = () => {\n    const currentSequence = sequence === 2 ? 0 : sequence + 1;\n    dispatch(changeSequenceAction(currentSequence));\n  }; // 控制上一首，下一首切换\n\n\n  const changeMusic = tag => {\n    dispatch(changeSongPlayerAction(tag));\n  }; // 控制播放完毕后，自动切换下一首播放\n\n\n  const handleMusicEnded = () => {\n    if (sequence === 2) {\n      // 单曲循环\n      // 直接把播放时间设置为 0\n      audioRef.current.currentTime = 0;\n      audioRef.current.play();\n    } else {\n      // 随机/顺序播放\n      dispatch(changeSongPlayerAction(1));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(PlaybarWrapper, {\n    className: \"sprite_playbar\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content wrap-v2\",\n      children: [/*#__PURE__*/_jsxDEV(Control, {\n        isPlaying: isPlaying,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"sprite_playbar prev\",\n          onClick: e => {\n            changeMusic(-1);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"sprite_playbar play\",\n          onClick: e => playMusic()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"sprite_playbar next\",\n          onClick: e => {\n            changeMusic(1);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PlayInfo, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"image\",\n          children: /*#__PURE__*/_jsxDEV(NavLink, {\n            to: \"/player\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: getSizeImage(picUrl, 35),\n              alt: \"\\u97F3\\u4E50\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"info\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"song\",\n            children: [/*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"/todo\",\n              className: \"song-name\",\n              children: songName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"/todo\",\n              className: \"singer-name\",\n              children: singerName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"progress\",\n            children: [/*#__PURE__*/_jsxDEV(Slider, {\n              tipFormatter: null,\n              value: progress,\n              onChange: sliderChange,\n              onAfterChange: sliderAfterChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"time\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"now-time\",\n                children: showCurrentTime\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 200,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"divider\",\n                children: \"/\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 201,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"duration\",\n                children: showDuration\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 202,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Operator, {\n        sequence: sequence,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"left\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"playerbar_pip btn pip\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"sprite_playbar btn favor\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"sprite_playbar btn share\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"right sprite_playbar\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"sprite_playbar btn volume\",\n            onClick: e => setShowVolume(!showVolume)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"sprite_playbar btn loop\",\n            onClick: e => {\n              changeSequence();\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"sprite_playbar btn playlist\",\n            onClick: e => setShowPanel(!showPanel)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n        ref: audioRef,\n        onTimeUpdate: timeUpdate,\n        onEnded: e => {\n          handleMusicEnded();\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this), showVolume && /*#__PURE__*/_jsxDEV(LJPlayerVolume, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 24\n      }, this), showPanel && /*#__PURE__*/_jsxDEV(LJPlayerPanel, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 23\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 5\n  }, this);\n}, \"H5YQKG6uEZ5bAwfvW4687PUawE8=\", false, function () {\n  return [useSelector, useDispatch];\n}));\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"%default%$memo\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["F:/ReactTea/moxy-music-react/src/pages/player/app-player-bar/index.js"],"names":["React","memo","useState","useEffect","useRef","useCallback","useDispatch","useSelector","shallowEqual","NavLink","Slider","message","LJPlayerVolume","LJPlayerPanel","getSizeImage","formatDate","getPlayUrl","getSongDetailAction","changeSequenceAction","changeSongPlayerAction","changeCurrentLyricIndexAction","changePlayerVolumeAction","PlaybarWrapper","Control","PlayInfo","Operator","LJAppPlayBar","currentTime","setCurrentTime","progress","setProgress","isChanging","setIsChanging","isPlaying","setIsPlaying","showVolume","setShowVolume","showPanel","setShowPanel","currentSong","sequence","lyricList","currentLyricIndex","state","getIn","dispatch","audioRef","current","src","id","play","then","res","catch","err","picUrl","al","songName","name","singerName","ar","duration","dt","showDuration","showCurrentTime","playMusic","pause","timeUpdate","e","time","target","i","length","lyricItem","content","open","key","sliderChange","value","sliderAfterChange","changeSequence","currentSequence","changeMusic","tag","handleMusicEnded"],"mappings":"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","sourcesContent":["import React, { memo, useState, useEffect, useRef, useCallback } from \"react\";\r\nimport { useDispatch, useSelector, shallowEqual } from \"react-redux\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { Slider, message } from \"antd\";\r\n\r\nimport LJPlayerVolume from \"./c-cpns/app-player-volume\";\r\nimport LJPlayerPanel from \"./c-cpns/app-player-panel\";\r\n\r\nimport { getSizeImage, formatDate, getPlayUrl } from \"@/utils/format-utils\";\r\nimport {\r\n  getSongDetailAction,\r\n  changeSequenceAction,\r\n  changeSongPlayerAction,\r\n  changeCurrentLyricIndexAction,\r\n  changePlayerVolumeAction,\r\n} from \"../store/actionCreators\";\r\n\r\nimport { PlaybarWrapper, Control, PlayInfo, Operator } from \"./style\";\r\n\r\nexport default memo(function LJAppPlayBar() {\r\n  // component state：      组件内部的state\r\n  const [currentTime, setCurrentTime] = useState(0);\r\n  const [progress, setProgress] = useState(0);\r\n  const [isChanging, setIsChanging] = useState(false);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [showVolume, setShowVolume] = useState(false);\r\n  const [showPanel, setShowPanel] = useState(false);\r\n\r\n  // redux hooks：          获取state和dispatch\r\n  const { currentSong, sequence, lyricList, currentLyricIndex } = useSelector(\r\n    (state) => ({\r\n      currentSong: state.getIn([\"player\", \"currentSong\"]),\r\n      sequence: state.getIn([\"player\", \"sequence\"]),\r\n      lyricList: state.getIn([\"player\", \"lyricList\"]),\r\n      currentLyricIndex: state.getIn([\"player\", \"currentLyricIndex\"]),\r\n    }),\r\n    shallowEqual\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const audioRef = useRef();\r\n\r\n  // other hooks：          react的hooks\r\n  useEffect(() => {\r\n    dispatch(getSongDetailAction(1858069368));\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    audioRef.current.src = getPlayUrl(currentSong.id);\r\n    // 自动播放\r\n    audioRef.current\r\n      .play()\r\n      .then((res) => {\r\n        setIsPlaying(true);\r\n      })\r\n      .catch((err) => {\r\n        setIsPlaying(false);\r\n      });\r\n  }, [currentSong.id]);\r\n\r\n  // other function：       组件内部的其他逻辑\r\n  // 判断如果有值，才会去值，否则为 undefined。防止报，且可以一个默认值，这里就没给了。\r\n  const picUrl = (currentSong.al && currentSong.al.picUrl) || \"\";\r\n  const songName = currentSong.name || \"未知歌曲\";\r\n  const singerName = (currentSong.ar && currentSong.ar[0].name) || \"未知歌手\";\r\n  const duration = currentSong.dt || 0;\r\n  const showDuration = formatDate(duration, \"mm:ss\");\r\n  const showCurrentTime = formatDate(currentTime * 1000, \"mm:ss\");\r\n\r\n  //handle function\r\n  // 播放逻辑\r\n  const playMusic = useCallback(() => {\r\n    isPlaying ? audioRef.current.pause() : audioRef.current.play();\r\n    setIsPlaying(!isPlaying);\r\n  }, [isPlaying]);\r\n\r\n  // 播放条上的当前时间\r\n  const timeUpdate = (e) => {\r\n    const time = e.target.currentTime;\r\n    if (!isChanging) {\r\n      setCurrentTime(time);\r\n      setProgress(((currentTime * 1000) / duration) * 100);\r\n    }\r\n\r\n    // 获取当前时间的歌词\r\n    let i = 0;\r\n    for (; i < lyricList.length; i++) {\r\n      let lyricItem = lyricList[i];\r\n      // console.log(Ntime, \"@\", lyricItem.time, \"%\");\r\n      if (time * 1000 < lyricItem.time) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    // console.log(lyricList[i - 1]);\r\n    if (currentLyricIndex !== i - 1) {\r\n      dispatch(changeCurrentLyricIndexAction(i - 1));\r\n      // 防止 i-1 为 -1， 取不到值而报错\r\n      const content = lyricList[i - 1] && lyricList[i - 1].content;\r\n      message.open({\r\n        key: \"lyric\",\r\n        content,\r\n        duration: 0,\r\n      });\r\n    }\r\n  };\r\n\r\n  // Slider是一个组定义组件，要往里面传递参数的时候，使用useCallback嵌套回调函数的时候，防止频繁重新定义\r\n  // 按下\r\n  const sliderChange = useCallback(\r\n    (value) => {\r\n      const time = ((value / 100) * duration) / 1000;\r\n      setProgress(value);\r\n      setCurrentTime(time);\r\n      setIsChanging(true);\r\n    },\r\n    [duration]\r\n  );\r\n  // 松开\r\n  const sliderAfterChange = useCallback(\r\n    (value) => {\r\n      const time = ((value / 100) * duration) / 1000;\r\n      audioRef.current.currentTime = time;\r\n      setCurrentTime(time);\r\n      setIsChanging(false);\r\n      if (!isPlaying) playMusic();\r\n    },\r\n    [duration, isPlaying, playMusic]\r\n  );\r\n\r\n  // 控制循环单曲随机播放\r\n  const changeSequence = () => {\r\n    const currentSequence = sequence === 2 ? 0 : sequence + 1;\r\n    dispatch(changeSequenceAction(currentSequence));\r\n  };\r\n\r\n  // 控制上一首，下一首切换\r\n  const changeMusic = (tag) => {\r\n    dispatch(changeSongPlayerAction(tag));\r\n  };\r\n\r\n  // 控制播放完毕后，自动切换下一首播放\r\n  const handleMusicEnded = () => {\r\n    if (sequence === 2) {\r\n      // 单曲循环\r\n      // 直接把播放时间设置为 0\r\n      audioRef.current.currentTime = 0;\r\n      audioRef.current.play();\r\n    } else {\r\n      // 随机/顺序播放\r\n      dispatch(changeSongPlayerAction(1));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <PlaybarWrapper className=\"sprite_playbar\">\r\n      <div className=\"content wrap-v2\">\r\n        <Control isPlaying={isPlaying}>\r\n          <button\r\n            className=\"sprite_playbar prev\"\r\n            onClick={(e) => {\r\n              changeMusic(-1);\r\n            }}\r\n          ></button>\r\n          <button\r\n            className=\"sprite_playbar play\"\r\n            onClick={(e) => playMusic()}\r\n          ></button>\r\n          <button\r\n            className=\"sprite_playbar next\"\r\n            onClick={(e) => {\r\n              changeMusic(1);\r\n            }}\r\n          ></button>\r\n        </Control>\r\n        <PlayInfo>\r\n          <div className=\"image\">\r\n            <NavLink to=\"/player\">\r\n              <img src={getSizeImage(picUrl, 35)} alt=\"音乐\" />\r\n            </NavLink>\r\n          </div>\r\n          <div className=\"info\">\r\n            <div className=\"song\">\r\n              <a href=\"/todo\" className=\"song-name\">\r\n                {songName}\r\n              </a>\r\n              <a href=\"/todo\" className=\"singer-name\">\r\n                {singerName}\r\n              </a>\r\n            </div>\r\n            <div className=\"progress\">\r\n              <Slider\r\n                tipFormatter={null}\r\n                value={progress}\r\n                onChange={sliderChange}\r\n                onAfterChange={sliderAfterChange}\r\n              />\r\n              <div className=\"time\">\r\n                <span className=\"now-time\">{showCurrentTime}</span>\r\n                <span className=\"divider\">/</span>\r\n                <span className=\"duration\">{showDuration}</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </PlayInfo>\r\n        <Operator sequence={sequence}>\r\n          <div className=\"left\">\r\n            <button className=\"playerbar_pip btn pip\"></button>\r\n            <button className=\"sprite_playbar btn favor\"></button>\r\n            <button className=\"sprite_playbar btn share\"></button>\r\n          </div>\r\n          <div className=\"right sprite_playbar\">\r\n            <button\r\n              className=\"sprite_playbar btn volume\"\r\n              onClick={(e) => setShowVolume(!showVolume)}\r\n            ></button>\r\n            <button\r\n              className=\"sprite_playbar btn loop\"\r\n              onClick={(e) => {\r\n                changeSequence();\r\n              }}\r\n            ></button>\r\n            <button\r\n              className=\"sprite_playbar btn playlist\"\r\n              onClick={(e) => setShowPanel(!showPanel)}\r\n            ></button>\r\n          </div>\r\n        </Operator>\r\n        <audio\r\n          ref={audioRef}\r\n          onTimeUpdate={timeUpdate}\r\n          onEnded={(e) => {\r\n            handleMusicEnded();\r\n          }}\r\n        />\r\n        {showVolume && <LJPlayerVolume />}\r\n        {showPanel && <LJPlayerPanel />}\r\n      </div>\r\n    </PlaybarWrapper>\r\n  );\r\n});\r\n"]},"metadata":{},"sourceType":"module"}