{"ast":null,"code":"import _toConsumableArray from\"F:/ReactTea/moxy-music-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import*as actionTypes from\"./constants\";import{getSongDetail,getLyric}from\"@/services/player\";import{getRandomNumber}from\"@/utils/math-utils\";import{parseLyric}from\"@/utils/parse-lyric\";// 不对外暴露的区域\nvar changeCurrentSongAction=function changeCurrentSongAction(res){return{type:actionTypes.CHANGE_CURRENT_SONG,currentSong:res};};var changePlayListAction=function changePlayListAction(playList){return{type:actionTypes.CHANGE_PLAY_LIST,playList:playList};};var changeCurrentSongIndexAction=function changeCurrentSongIndexAction(index){return{type:actionTypes.CHANGE_CURRENT_SONG_INDEX,index:index};};// 把歌词添加到 store 中\nvar changelyricListAction=function changelyricListAction(lyricList){return{type:actionTypes.CHANGE_LYRIC_LIST,lyricList:lyricList};};// 对外暴露的区域\nexport var changeSequenceAction=function changeSequenceAction(sequence){return{type:actionTypes.CHANGE_SEQUENCE,sequence:sequence};};// 上一首，下一首 的切换，采用异步action方式\nexport var changeSongPlayerAction=function changeSongPlayerAction(tag){return function(dispatch,getState){var playList=getState().getIn([\"player\",\"playList\"]);var sequence=getState().getIn([\"player\",\"sequence\"]);var currentSongIndex=getState().getIn([\"player\",\"currentSongIndex\"]);switch(sequence){case 1:// 随机播放\nvar randomIndex=getRandomNumber(playList.length);while(randomIndex===currentSongIndex){randomIndex=getRandomNumber(playList.length);}currentSongIndex=randomIndex;break;default:// 其他播放\ncurrentSongIndex+=tag;if(currentSongIndex>=playList.length)currentSongIndex=0;if(currentSongIndex<0)currentSongIndex=playList.length-1;break;}var currentSong=playList[currentSongIndex];dispatch(changeCurrentSongAction(currentSong));dispatch(changeCurrentSongIndexAction(currentSongIndex));// 请求该歌曲的歌词\ndispatch(getLyricAction(currentSong.id));};};// 添加歌曲/第一次打开页面时，获取歌曲信息\nexport var getSongDetailAction=function getSongDetailAction(idx){return function(dispatch,getState){// 1.根据ids查找playList中是否已经有该歌曲\nvar playList=getState().getIn([\"player\",\"playList\"]);var songIndex=playList.findIndex(function(item){return item.id===idx;});// 2.判断是否找到歌曲\n// 如果返回的是大于0的下标，则表明找到了。\nif(songIndex!==-1){dispatch(changeCurrentSongIndexAction(songIndex));var song=playList[songIndex];console.log(song);dispatch(changeCurrentSongAction(song));// 3 请求该歌曲的歌词\ndispatch(getLyricAction(song.id));}else{// 如果返回的是-1，则表明没找到，则请求歌曲\ngetSongDetail(idx).then(function(res){// res.songs && 防止 songs 是 undefined\nvar song=res.songs&&res.songs[0];// !song 防止 song 是 undefined，如果是 undefined什么也不做，直接结束执行\nif(!song)return;// 1.将最新请求的歌曲添加到播放列表中\nvar newPlayList=_toConsumableArray(playList);newPlayList.push(song);// 2.更新redux中的值\ndispatch(changePlayListAction(newPlayList));dispatch(changeCurrentSongIndexAction(newPlayList.length-1));dispatch(changeCurrentSongAction(song));// 3 请求该歌曲的歌词\ndispatch(getLyricAction(song.id));});}};};// 对应 id 的获取歌词\nexport var getLyricAction=function getLyricAction(id){return function(dispatch){getLyric(id).then(function(res){var lyric=res.lrc.lyric;var lyricList=parseLyric(lyric);dispatch(changelyricListAction(lyricList));});};};// 记录当前歌词的下标\nexport var changeCurrentLyricIndexAction=function changeCurrentLyricIndexAction(currentLyricIndex){return{type:actionTypes.CHANGE_CURRENT_LYRIC_INDEX,currentLyricIndex:currentLyricIndex};};","map":{"version":3,"sources":["F:/ReactTea/moxy-music-react/src/pages/player/store/actionCreators.js"],"names":["actionTypes","getSongDetail","getLyric","getRandomNumber","parseLyric","changeCurrentSongAction","res","type","CHANGE_CURRENT_SONG","currentSong","changePlayListAction","playList","CHANGE_PLAY_LIST","changeCurrentSongIndexAction","index","CHANGE_CURRENT_SONG_INDEX","changelyricListAction","lyricList","CHANGE_LYRIC_LIST","changeSequenceAction","sequence","CHANGE_SEQUENCE","changeSongPlayerAction","tag","dispatch","getState","getIn","currentSongIndex","randomIndex","length","getLyricAction","id","getSongDetailAction","idx","songIndex","findIndex","item","song","console","log","then","songs","newPlayList","push","lyric","lrc","changeCurrentLyricIndexAction","currentLyricIndex","CHANGE_CURRENT_LYRIC_INDEX"],"mappings":"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","sourcesContent":["import * as actionTypes from \"./constants\";\r\n\r\nimport { getSongDetail, getLyric } from \"@/services/player\";\r\nimport { getRandomNumber } from \"@/utils/math-utils\";\r\nimport { parseLyric } from \"@/utils/parse-lyric\";\r\n\r\n// 不对外暴露的区域\r\nconst changeCurrentSongAction = (res) => ({\r\n  type: actionTypes.CHANGE_CURRENT_SONG,\r\n  currentSong: res,\r\n});\r\n\r\nconst changePlayListAction = (playList) => ({\r\n  type: actionTypes.CHANGE_PLAY_LIST,\r\n  playList,\r\n});\r\n\r\nconst changeCurrentSongIndexAction = (index) => ({\r\n  type: actionTypes.CHANGE_CURRENT_SONG_INDEX,\r\n  index,\r\n});\r\n\r\n// 把歌词添加到 store 中\r\nconst changelyricListAction = (lyricList) => ({\r\n  type: actionTypes.CHANGE_LYRIC_LIST,\r\n  lyricList,\r\n});\r\n\r\n// 对外暴露的区域\r\nexport const changeSequenceAction = (sequence) => ({\r\n  type: actionTypes.CHANGE_SEQUENCE,\r\n  sequence,\r\n});\r\n\r\n// 上一首，下一首 的切换，采用异步action方式\r\nexport const changeSongPlayerAction = (tag) => {\r\n  return (dispatch, getState) => {\r\n    const playList = getState().getIn([\"player\", \"playList\"]);\r\n    const sequence = getState().getIn([\"player\", \"sequence\"]);\r\n    let currentSongIndex = getState().getIn([\"player\", \"currentSongIndex\"]);\r\n    switch (sequence) {\r\n      case 1: // 随机播放\r\n        let randomIndex = getRandomNumber(playList.length);\r\n        while (randomIndex === currentSongIndex) {\r\n          randomIndex = getRandomNumber(playList.length);\r\n        }\r\n        currentSongIndex = randomIndex;\r\n        break;\r\n      default:\r\n        // 其他播放\r\n        currentSongIndex += tag;\r\n        if (currentSongIndex >= playList.length) currentSongIndex = 0;\r\n        if (currentSongIndex < 0) currentSongIndex = playList.length - 1;\r\n        break;\r\n    }\r\n    const currentSong = playList[currentSongIndex];\r\n    dispatch(changeCurrentSongAction(currentSong));\r\n    dispatch(changeCurrentSongIndexAction(currentSongIndex));\r\n\r\n    // 请求该歌曲的歌词\r\n    dispatch(getLyricAction(currentSong.id));\r\n  };\r\n};\r\n\r\n// 添加歌曲/第一次打开页面时，获取歌曲信息\r\nexport const getSongDetailAction = (idx) => {\r\n  return (dispatch, getState) => {\r\n    // 1.根据ids查找playList中是否已经有该歌曲\r\n    const playList = getState().getIn([\"player\", \"playList\"]);\r\n    const songIndex = playList.findIndex((item) => item.id === idx);\r\n\r\n    // 2.判断是否找到歌曲\r\n    // 如果返回的是大于0的下标，则表明找到了。\r\n    if (songIndex !== -1) {\r\n      dispatch(changeCurrentSongIndexAction(songIndex));\r\n      const song = playList[songIndex];\r\n      console.log(song);\r\n      dispatch(changeCurrentSongAction(song));\r\n\r\n      // 3 请求该歌曲的歌词\r\n      dispatch(getLyricAction(song.id));\r\n    } else {\r\n      // 如果返回的是-1，则表明没找到，则请求歌曲\r\n      getSongDetail(idx).then((res) => {\r\n        // res.songs && 防止 songs 是 undefined\r\n        const song = res.songs && res.songs[0];\r\n        // !song 防止 song 是 undefined，如果是 undefined什么也不做，直接结束执行\r\n        if (!song) return;\r\n        // 1.将最新请求的歌曲添加到播放列表中\r\n        const newPlayList = [...playList];\r\n        newPlayList.push(song);\r\n\r\n        // 2.更新redux中的值\r\n        dispatch(changePlayListAction(newPlayList));\r\n        dispatch(changeCurrentSongIndexAction(newPlayList.length - 1));\r\n        dispatch(changeCurrentSongAction(song));\r\n\r\n        // 3 请求该歌曲的歌词\r\n        dispatch(getLyricAction(song.id));\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\n// 对应 id 的获取歌词\r\nexport const getLyricAction = (id) => {\r\n  return (dispatch) => {\r\n    getLyric(id).then((res) => {\r\n      const lyric = res.lrc.lyric;\r\n      const lyricList = parseLyric(lyric);\r\n      dispatch(changelyricListAction(lyricList));\r\n    });\r\n  };\r\n};\r\n\r\n// 记录当前歌词的下标\r\nexport const changeCurrentLyricIndexAction = (currentLyricIndex) => ({\r\n  type: actionTypes.CHANGE_CURRENT_LYRIC_INDEX,\r\n  currentLyricIndex,\r\n});\r\n"]},"metadata":{},"sourceType":"module"}