{"ast":null,"code":"import _createForOfIteratorHelper from\"/Users/moxy/ReactTea/moxy-music-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";// [00:00.77]Once upon a younger year\n// [00:04.47]When all our shadows disappeared\n// [00:06.44]The animals inside came out to play\n// [00:10.15]Went face to face with all our fears\n//\n// [00:10.15]Went face to face with all our fears\n// 切割的正则表达式\nvar parseExp=/\\[(\\d{2}):(\\d{2})\\.(\\d{2,3})\\]/;// 歌词切换\nexport function parseLyric(lyricString){// 用于保存得到的每一个歌词对象\nvar lyrics=[];// 获得一个数组，把一长串的歌词切割为一句一句的。\nvar lineStrings=lyricString.split(\"\\n\");var _iterator=_createForOfIteratorHelper(lineStrings),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var line=_step.value;// 判断是否有值，有可能切割后有空元素\nif(line){var result=parseExp.exec(line);if(result===null)continue;// 拿到时间后，转换为毫秒\nvar time1=result[1]*60*1000;var time2=result[2]*1000;// 根据单词列表，最后一组数字有可能是3位，有可能是2位\nvar time3=result[3].length===3?result[3]*1:result[3]*10;var time=time1+time2+time3;// 对字符串进行删减，只保留歌词\nvar content=line.replace(parseExp,\"\").trim();// 得到这个对象，然后添加到lyrics数组中\nlyrics.push({time:time,content:content});}}}catch(err){_iterator.e(err);}finally{_iterator.f();}return lyrics;}","map":{"version":3,"sources":["/Users/moxy/ReactTea/moxy-music-react/src/utils/parse-lyric.js"],"names":["parseExp","parseLyric","lyricString","lyrics","lineStrings","split","line","result","exec","time1","time2","time3","length","time","content","replace","trim","push"],"mappings":"oLAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA,GAAMA,CAAAA,QAAQ,CAAG,gCAAjB,CAEA;AACA,MAAO,SAASC,CAAAA,UAAT,CAAoBC,WAApB,CAAiC,CACtC;AACA,GAAMC,CAAAA,MAAM,CAAG,EAAf,CAEA;AACA,GAAMC,CAAAA,WAAW,CAAGF,WAAW,CAACG,KAAZ,CAAkB,IAAlB,CAApB,CALsC,yCAMrBD,WANqB,YAMtC,+CAA8B,IAArBE,CAAAA,IAAqB,aAC5B;AACA,GAAIA,IAAJ,CAAU,CACR,GAAMC,CAAAA,MAAM,CAAGP,QAAQ,CAACQ,IAAT,CAAcF,IAAd,CAAf,CACA,GAAIC,MAAM,GAAK,IAAf,CAAqB,SACrB;AACA,GAAME,CAAAA,KAAK,CAAGF,MAAM,CAAC,CAAD,CAAN,CAAY,EAAZ,CAAiB,IAA/B,CACA,GAAMG,CAAAA,KAAK,CAAGH,MAAM,CAAC,CAAD,CAAN,CAAY,IAA1B,CACA;AACA,GAAMI,CAAAA,KAAK,CAAGJ,MAAM,CAAC,CAAD,CAAN,CAAUK,MAAV,GAAqB,CAArB,CAAyBL,MAAM,CAAC,CAAD,CAAN,CAAY,CAArC,CAAyCA,MAAM,CAAC,CAAD,CAAN,CAAY,EAAnE,CACA,GAAMM,CAAAA,IAAI,CAAGJ,KAAK,CAAGC,KAAR,CAAgBC,KAA7B,CACA;AACA,GAAMG,CAAAA,OAAO,CAAGR,IAAI,CAACS,OAAL,CAAaf,QAAb,CAAuB,EAAvB,EAA2BgB,IAA3B,EAAhB,CACA;AACAb,MAAM,CAACc,IAAP,CAAY,CAAEJ,IAAI,CAAJA,IAAF,CAAQC,OAAO,CAAPA,OAAR,CAAZ,EACD,CACF,CAtBqC,qDAuBtC,MAAOX,CAAAA,MAAP,CACD","sourcesContent":["// [00:00.77]Once upon a younger year\n// [00:04.47]When all our shadows disappeared\n// [00:06.44]The animals inside came out to play\n// [00:10.15]Went face to face with all our fears\n//\n\n// [00:10.15]Went face to face with all our fears\n// 切割的正则表达式\nconst parseExp = /\\[(\\d{2}):(\\d{2})\\.(\\d{2,3})\\]/;\n\n// 歌词切换\nexport function parseLyric(lyricString) {\n  // 用于保存得到的每一个歌词对象\n  const lyrics = [];\n\n  // 获得一个数组，把一长串的歌词切割为一句一句的。\n  const lineStrings = lyricString.split(\"\\n\");\n  for (let line of lineStrings) {\n    // 判断是否有值，有可能切割后有空元素\n    if (line) {\n      const result = parseExp.exec(line);\n      if (result === null) continue;\n      // 拿到时间后，转换为毫秒\n      const time1 = result[1] * 60 * 1000;\n      const time2 = result[2] * 1000;\n      // 根据单词列表，最后一组数字有可能是3位，有可能是2位\n      const time3 = result[3].length === 3 ? result[3] * 1 : result[3] * 10;\n      const time = time1 + time2 + time3;\n      // 对字符串进行删减，只保留歌词\n      const content = line.replace(parseExp, \"\").trim();\n      // 得到这个对象，然后添加到lyrics数组中\n      lyrics.push({ time, content });\n    }\n  }\n  return lyrics;\n}\n"]},"metadata":{},"sourceType":"module"}