{"ast":null,"code":"var _jsxFileName = \"F:\\\\ReactTea\\\\moxy-music-react\\\\src\\\\pages\\\\discover\\\\c-pages\\\\ranking\\\\c-cpns\\\\rank-header\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { memo } from \"react\";\nimport { shallowEqual, useSelector } from \"react-redux\";\nimport { getSizeImage, formatMonthDay } from \"@/utils/format-utils\";\nimport LJRankingSongPannelBar from \"@/components/ranking-song-pannel-bar\";\nimport { LJRankingTitleWrapper } from \"./style\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default _c2 = /*#__PURE__*/memo(_c = _s(function LJRankingTitle() {\n  _s();\n\n  // redux hooks\n  const {\n    playList,\n    listTitle,\n    currentIndex\n  } = useSelector(state => ({\n    playList: state.getIn([\"ranking\", \"playList\"]),\n    listTitle: state.getIn([\"ranking\", \"listTitle\"]),\n    currentIndex: state.getIn([\"ranking\", \"currentIndex\"])\n  }), shallowEqual); // react hooks\n\n  const titleName = \"歌曲列表\";\n  const titleNumber = playList.tracks.length;\n  const titlePlayer = playList.playCount;\n  return /*#__PURE__*/_jsxDEV(LJRankingTitleWrapper, {\n    titleName: \"歌曲列表\",\n    titleNumber: playList.tracks.length,\n    titlePlayer: playList.playCount,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: getSizeImage(playList.coverImgUrl, 150),\n        alt: playList.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mask sprite_cover\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"info\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"name\",\n        children: playList.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"time\",\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"icon sprite_icon2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"flash\",\n          children: [\"\\u6700\\u8FD1\\u66F4\\u65B0\\uFF1A\", formatMonthDay(playList.trackUpdateTime)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"regular\",\n          children: [\"\\uFF08\", listTitle[currentIndex] && listTitle[currentIndex].updateFrequency, \"\\uFF09\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(LJRankingSongPannelBar, {\n        subscribedCount: `(${playList.subscribedCount})`,\n        shareCount: `(${playList.shareCount})`,\n        download: \"\\u4E0B\\u8F7D\",\n        commentCount: `(${playList.commentCount})`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n}, \"vkponndq/9Zcu0/NlVBE+gwylCI=\", false, function () {\n  return [useSelector];\n}));\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"%default%$memo\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["F:/ReactTea/moxy-music-react/src/pages/discover/c-pages/ranking/c-cpns/rank-header/index.js"],"names":["React","memo","shallowEqual","useSelector","getSizeImage","formatMonthDay","LJRankingSongPannelBar","LJRankingTitleWrapper","LJRankingTitle","playList","listTitle","currentIndex","state","getIn","titleName","titleNumber","tracks","length","titlePlayer","playCount","coverImgUrl","name","trackUpdateTime","updateFrequency","subscribedCount","shareCount","commentCount"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,QAA4B,OAA5B;AACA,SAASC,YAAT,EAAuBC,WAAvB,QAA0C,aAA1C;AAEA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,sBAA7C;AAEA,OAAOC,sBAAP,MAAmC,sCAAnC;AAEA,SAASC,qBAAT,QAAsC,SAAtC;;AACA,kCAAeN,IAAI,SAAC,SAASO,cAAT,GAA0B;AAAA;;AAC5C;AACA,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,SAAZ;AAAuBC,IAAAA;AAAvB,MAAwCR,WAAW,CACtDS,KAAD,KAAY;AACVH,IAAAA,QAAQ,EAAEG,KAAK,CAACC,KAAN,CAAY,CAAC,SAAD,EAAY,UAAZ,CAAZ,CADA;AAEVH,IAAAA,SAAS,EAAEE,KAAK,CAACC,KAAN,CAAY,CAAC,SAAD,EAAY,WAAZ,CAAZ,CAFD;AAGVF,IAAAA,YAAY,EAAEC,KAAK,CAACC,KAAN,CAAY,CAAC,SAAD,EAAY,cAAZ,CAAZ;AAHJ,GAAZ,CADuD,EAMvDX,YANuD,CAAzD,CAF4C,CAW5C;;AACA,QAAMY,SAAS,GAAG,MAAlB;AACA,QAAMC,WAAW,GAAGN,QAAQ,CAACO,MAAT,CAAgBC,MAApC;AACA,QAAMC,WAAW,GAAGT,QAAQ,CAACU,SAA7B;AAEA,sBACE,QAAC,qBAAD;AACE,IAAA,SAAS,EAAE,MADb;AAEE,IAAA,WAAW,EAAEV,QAAQ,CAACO,MAAT,CAAgBC,MAF/B;AAGE,IAAA,WAAW,EAAER,QAAQ,CAACU,SAHxB;AAAA,4BAKE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA,8BACE;AACE,QAAA,GAAG,EAAEf,YAAY,CAACK,QAAQ,CAACW,WAAV,EAAuB,GAAvB,CADnB;AAEE,QAAA,GAAG,EAAEX,QAAQ,CAACY;AAFhB;AAAA;AAAA;AAAA;AAAA,cADF,eAKE;AAAK,QAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA,YALF,eAYE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA,kBAAuBZ,QAAQ,CAACY;AAAhC;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA,gCACE;AAAG,UAAA,SAAS,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAM,UAAA,SAAS,EAAC,OAAhB;AAAA,uDACQhB,cAAc,CAACI,QAAQ,CAACa,eAAV,CADtB;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,eAKE;AAAM,UAAA,SAAS,EAAC,SAAhB;AAAA,+BAEGZ,SAAS,CAACC,YAAD,CAAT,IAA2BD,SAAS,CAACC,YAAD,CAAT,CAAwBY,eAFtD;AAAA;AAAA;AAAA;AAAA;AAAA,gBALF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAaE,QAAC,sBAAD;AACE,QAAA,eAAe,EAAG,IAAGd,QAAQ,CAACe,eAAgB,GADhD;AAEE,QAAA,UAAU,EAAG,IAAGf,QAAQ,CAACgB,UAAW,GAFtC;AAGE,QAAA,QAAQ,EAAC,cAHX;AAIE,QAAA,YAAY,EAAG,IAAGhB,QAAQ,CAACiB,YAAa;AAJ1C;AAAA;AAAA;AAAA;AAAA,cAbF;AAAA;AAAA;AAAA;AAAA;AAAA,YAZF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmCD,CAnDkB;AAAA,UAE6BvB,WAF7B;AAAA,GAAnB","sourcesContent":["import React, { memo } from \"react\";\r\nimport { shallowEqual, useSelector } from \"react-redux\";\r\n\r\nimport { getSizeImage, formatMonthDay } from \"@/utils/format-utils\";\r\n\r\nimport LJRankingSongPannelBar from \"@/components/ranking-song-pannel-bar\";\r\n\r\nimport { LJRankingTitleWrapper } from \"./style\";\r\nexport default memo(function LJRankingTitle() {\r\n  // redux hooks\r\n  const { playList, listTitle, currentIndex } = useSelector(\r\n    (state) => ({\r\n      playList: state.getIn([\"ranking\", \"playList\"]),\r\n      listTitle: state.getIn([\"ranking\", \"listTitle\"]),\r\n      currentIndex: state.getIn([\"ranking\", \"currentIndex\"]),\r\n    }),\r\n    shallowEqual\r\n  );\r\n\r\n  // react hooks\r\n  const titleName = \"歌曲列表\";\r\n  const titleNumber = playList.tracks.length;\r\n  const titlePlayer = playList.playCount;\r\n\r\n  return (\r\n    <LJRankingTitleWrapper\r\n      titleName={\"歌曲列表\"}\r\n      titleNumber={playList.tracks.length}\r\n      titlePlayer={playList.playCount}\r\n    >\r\n      <div className=\"image\">\r\n        <img\r\n          src={getSizeImage(playList.coverImgUrl, 150)}\r\n          alt={playList.name}\r\n        />\r\n        <div className=\"mask sprite_cover\"></div>\r\n      </div>\r\n      <div className=\"info\">\r\n        <div className=\"name\">{playList.name}</div>\r\n        <div className=\"time\">\r\n          <i className=\"icon sprite_icon2\"></i>\r\n          <span className=\"flash\">\r\n            最近更新：{formatMonthDay(playList.trackUpdateTime)}\r\n          </span>\r\n          <span className=\"regular\">\r\n            （\r\n            {listTitle[currentIndex] && listTitle[currentIndex].updateFrequency}\r\n            ）\r\n          </span>\r\n        </div>\r\n        <LJRankingSongPannelBar\r\n          subscribedCount={`(${playList.subscribedCount})`}\r\n          shareCount={`(${playList.shareCount})`}\r\n          download=\"下载\"\r\n          commentCount={`(${playList.commentCount})`}\r\n        />\r\n      </div>\r\n    </LJRankingTitleWrapper>\r\n  );\r\n});\r\n"]},"metadata":{},"sourceType":"module"}