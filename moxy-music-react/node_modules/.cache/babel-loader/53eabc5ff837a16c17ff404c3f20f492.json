{"ast":null,"code":"import _slicedToArray from\"/Users/moxy/ReactTea/moxy-music-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{memo,useState,useEffect,useRef,useCallback}from\"react\";import{useDispatch,useSelector,shallowEqual}from\"react-redux\";import{NavLink}from\"react-router-dom\";import{Slider,message}from\"antd\";import LJPlayerVolume from\"./c-cpns/app-player-volume\";import LJPlayerPanel from\"./c-cpns/app-player-panel\";import{INIT_VOLUME}from\"@/common/contants\";import{getSizeImage,formatDate,getPlayUrl}from\"@/utils/format-utils\";import{getSongDetailAction,changeSequenceAction,changeSongPlayerAction,changeCurrentLyricIndexAction,changePlayerVolumeAction}from\"../store/actionCreators\";import{PlaybarWrapper,Control,PlayInfo,Operator}from\"./style\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default/*#__PURE__*/memo(function LJAppPlayBar(props){// props\nvar _props$volumnHandle=props.volumnHandle,showVolumn=_props$volumnHandle.showVolumn,setShowVolumn=_props$volumnHandle.setShowVolumn,_props$pannelHandle=props.pannelHandle,showPannel=_props$pannelHandle.showPannel,setShowPannel=_props$pannelHandle.setShowPannel;var _useState=useState(0),_useState2=_slicedToArray(_useState,2),currentTime=_useState2[0],setCurrentTime=_useState2[1];var _useState3=useState(0),_useState4=_slicedToArray(_useState3,2),progress=_useState4[0],setProgress=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),isChanging=_useState6[0],setIsChanging=_useState6[1];var _useState7=useState(false),_useState8=_slicedToArray(_useState7,2),isPlaying=_useState8[0],setIsPlaying=_useState8[1];// redux hooks：          获取state和dispatch\nvar _useSelector=useSelector(function(state){return{currentSong:state.getIn([\"player\",\"currentSong\"]),sequence:state.getIn([\"player\",\"sequence\"]),lyricList:state.getIn([\"player\",\"lyricList\"]),currentLyricIndex:state.getIn([\"player\",\"currentLyricIndex\"]),volume:state.getIn([\"player\",\"volume\"]),playList:state.getIn([\"player\",\"playList\"])};},shallowEqual),currentSong=_useSelector.currentSong,sequence=_useSelector.sequence,lyricList=_useSelector.lyricList,currentLyricIndex=_useSelector.currentLyricIndex,volume=_useSelector.volume,playList=_useSelector.playList;var dispatch=useDispatch();var audioRef=useRef();// other hooks：          react的hooks\n// 初始化音量\nuseEffect(function(){dispatch(changePlayerVolumeAction(INIT_VOLUME));},[dispatch]);useEffect(function(){dispatch(getSongDetailAction(1858069368));},[dispatch]);useEffect(function(){audioRef.current.src=getPlayUrl(currentSong.id);// 自动播放\naudioRef.current.play().then(function(res){setIsPlaying(true);}).catch(function(err){setIsPlaying(false);});},[currentSong.id]);useEffect(function(){audioRef.current.volume=volume;},[volume]);// other function：  组件内部的其他逻辑\n// 判断如果有值，才会去值，否则为 undefined。防止报，且可以一个默认值，这里就没给了。\nvar picUrl=currentSong.al&&currentSong.al.picUrl||\"\";var songName=currentSong.name||\"未知歌曲\";var singerName=currentSong.ar&&currentSong.ar[0].name||\"未知歌手\";var duration=currentSong.dt||0;var showDuration=formatDate(duration,\"mm:ss\");var showCurrentTime=formatDate(currentTime*1000,\"mm:ss\");//handle function\n// 播放逻辑\nvar playMusic=useCallback(function(){isPlaying?audioRef.current.pause():audioRef.current.play();setIsPlaying(!isPlaying);},[isPlaying]);// 播放条上的当前时间\nvar timeUpdate=function timeUpdate(e){var time=e.target.currentTime;if(!isChanging){setCurrentTime(time);setProgress(currentTime*1000/duration*100);}// 获取当前时间的歌词\nvar i=0;for(;i<lyricList.length;i++){var lyricItem=lyricList[i];// console.log(Ntime, \"@\", lyricItem.time, \"%\");\nif(time*1000<lyricItem.time){break;}}// console.log(lyricList[i - 1]);\nif(currentLyricIndex!==i-1){dispatch(changeCurrentLyricIndexAction(i-1));// 防止 i-1 为 -1， 取不到值而报错\nvar content=lyricList[i-1]&&lyricList[i-1].content;message.open({key:\"lyric\",content:content,duration:0});}};// Slider是一个组定义组件，要往里面传递参数的时候，使用useCallback嵌套回调函数的时候，防止频繁重新定义\n// 按下\nvar sliderChange=useCallback(function(value){var time=value/100*duration/1000;setProgress(value);setCurrentTime(time);setIsChanging(true);},[duration]);// 松开\nvar sliderAfterChange=useCallback(function(value){var time=value/100*duration/1000;audioRef.current.currentTime=time;setCurrentTime(time);setIsChanging(false);if(!isPlaying)playMusic();},[duration,isPlaying,playMusic]);// 控制循环单曲随机播放\nvar changeSequence=function changeSequence(){var currentSequence=sequence===2?0:sequence+1;dispatch(changeSequenceAction(currentSequence));};// 控制上一首，下一首切换\nvar changeMusic=function changeMusic(tag){dispatch(changeSongPlayerAction(tag));};// 控制播放完毕后，自动切换下一首播放\nvar handleMusicEnded=function handleMusicEnded(){if(sequence===2){// 单曲循环\n// 直接把播放时间设置为 0\naudioRef.current.currentTime=0;audioRef.current.play();}else{// 随机/顺序播放\ndispatch(changeSongPlayerAction(1));}};return/*#__PURE__*/_jsx(PlaybarWrapper,{className:\"sprite_playbar\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"content wrap-v2\",children:[/*#__PURE__*/_jsxs(Control,{isPlaying:isPlaying,children:[/*#__PURE__*/_jsx(\"button\",{className:\"sprite_playbar prev\",onClick:function onClick(e){changeMusic(-1);}}),/*#__PURE__*/_jsx(\"button\",{className:\"sprite_playbar play\",onClick:function onClick(e){return playMusic();}}),/*#__PURE__*/_jsx(\"button\",{className:\"sprite_playbar next\",onClick:function onClick(e){changeMusic(1);}})]}),/*#__PURE__*/_jsxs(PlayInfo,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"image\",children:/*#__PURE__*/_jsx(NavLink,{to:\"/player\",children:/*#__PURE__*/_jsx(\"img\",{src:getSizeImage(picUrl,35),alt:\"\\u97F3\\u4E50\"})})}),/*#__PURE__*/_jsxs(\"div\",{className:\"info\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"song\",children:[/*#__PURE__*/_jsx(\"a\",{href:\"/todo\",className:\"song-name\",children:songName}),/*#__PURE__*/_jsx(\"a\",{href:\"/todo\",className:\"singer-name\",children:singerName})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"progress\",children:[/*#__PURE__*/_jsx(Slider,{tipFormatter:null,value:progress,onChange:sliderChange,onAfterChange:sliderAfterChange}),/*#__PURE__*/_jsxs(\"div\",{className:\"time\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"now-time\",children:showCurrentTime}),/*#__PURE__*/_jsx(\"span\",{className:\"divider\",children:\"/\"}),/*#__PURE__*/_jsx(\"span\",{className:\"duration\",children:showDuration})]})]})]})]}),/*#__PURE__*/_jsxs(Operator,{sequence:sequence,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"left\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"playerbar_pip btn pip\"}),/*#__PURE__*/_jsx(\"button\",{className:\"sprite_playbar btn favor\"}),/*#__PURE__*/_jsx(\"button\",{className:\"sprite_playbar btn share\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"right sprite_playbar\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"sprite_playbar btn volume\",onClick:function onClick(e){return setShowVolumn(!showVolumn);}}),/*#__PURE__*/_jsx(\"button\",{className:\"sprite_playbar btn loop\",onClick:function onClick(e){changeSequence();}}),/*#__PURE__*/_jsx(\"button\",{className:\"sprite_playbar btn playlist\",onClick:function onClick(e){return setShowPannel(!showPannel);},children:playList.length})]})]}),/*#__PURE__*/_jsx(\"audio\",{ref:audioRef,onTimeUpdate:timeUpdate,onEnded:function onEnded(e){handleMusicEnded();}}),showVolumn&&/*#__PURE__*/_jsx(LJPlayerVolume,{}),showPannel&&/*#__PURE__*/_jsx(LJPlayerPanel,{})]})});});","map":{"version":3,"sources":["/Users/moxy/ReactTea/moxy-music-react/src/pages/player/app-player-bar/index.js"],"names":["React","memo","useState","useEffect","useRef","useCallback","useDispatch","useSelector","shallowEqual","NavLink","Slider","message","LJPlayerVolume","LJPlayerPanel","INIT_VOLUME","getSizeImage","formatDate","getPlayUrl","getSongDetailAction","changeSequenceAction","changeSongPlayerAction","changeCurrentLyricIndexAction","changePlayerVolumeAction","PlaybarWrapper","Control","PlayInfo","Operator","LJAppPlayBar","props","volumnHandle","showVolumn","setShowVolumn","pannelHandle","showPannel","setShowPannel","currentTime","setCurrentTime","progress","setProgress","isChanging","setIsChanging","isPlaying","setIsPlaying","state","currentSong","getIn","sequence","lyricList","currentLyricIndex","volume","playList","dispatch","audioRef","current","src","id","play","then","res","catch","err","picUrl","al","songName","name","singerName","ar","duration","dt","showDuration","showCurrentTime","playMusic","pause","timeUpdate","e","time","target","i","length","lyricItem","content","open","key","sliderChange","value","sliderAfterChange","changeSequence","currentSequence","changeMusic","tag","handleMusicEnded"],"mappings":"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","sourcesContent":["import React, { memo, useState, useEffect, useRef, useCallback } from \"react\";\nimport { useDispatch, useSelector, shallowEqual } from \"react-redux\";\nimport { NavLink } from \"react-router-dom\";\nimport { Slider, message } from \"antd\";\n\nimport LJPlayerVolume from \"./c-cpns/app-player-volume\";\nimport LJPlayerPanel from \"./c-cpns/app-player-panel\";\n\nimport { INIT_VOLUME } from \"@/common/contants\";\nimport { getSizeImage, formatDate, getPlayUrl } from \"@/utils/format-utils\";\nimport {\n  getSongDetailAction,\n  changeSequenceAction,\n  changeSongPlayerAction,\n  changeCurrentLyricIndexAction,\n  changePlayerVolumeAction,\n} from \"../store/actionCreators\";\n\nimport { PlaybarWrapper, Control, PlayInfo, Operator } from \"./style\";\n\nexport default memo(function LJAppPlayBar(props) {\n  // props\n  const {\n    volumnHandle: { showVolumn, setShowVolumn },\n    pannelHandle: { showPannel, setShowPannel },\n  } = props;\n\n  const [currentTime, setCurrentTime] = useState(0);\n  const [progress, setProgress] = useState(0);\n  const [isChanging, setIsChanging] = useState(false);\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  // redux hooks：          获取state和dispatch\n  const {\n    currentSong,\n    sequence,\n    lyricList,\n    currentLyricIndex,\n    volume,\n    playList,\n  } = useSelector(\n    (state) => ({\n      currentSong: state.getIn([\"player\", \"currentSong\"]),\n      sequence: state.getIn([\"player\", \"sequence\"]),\n      lyricList: state.getIn([\"player\", \"lyricList\"]),\n      currentLyricIndex: state.getIn([\"player\", \"currentLyricIndex\"]),\n      volume: state.getIn([\"player\", \"volume\"]),\n      playList: state.getIn([\"player\", \"playList\"]),\n    }),\n    shallowEqual\n  );\n\n  const dispatch = useDispatch();\n\n  const audioRef = useRef();\n\n  // other hooks：          react的hooks\n  // 初始化音量\n  useEffect(() => {\n    dispatch(changePlayerVolumeAction(INIT_VOLUME));\n  }, [dispatch]);\n  useEffect(() => {\n    dispatch(getSongDetailAction(1858069368));\n  }, [dispatch]);\n\n  useEffect(() => {\n    audioRef.current.src = getPlayUrl(currentSong.id);\n    // 自动播放\n    audioRef.current\n      .play()\n      .then((res) => {\n        setIsPlaying(true);\n      })\n      .catch((err) => {\n        setIsPlaying(false);\n      });\n  }, [currentSong.id]);\n\n  useEffect(() => {\n    audioRef.current.volume = volume;\n  }, [volume]);\n\n  // other function：  组件内部的其他逻辑\n  // 判断如果有值，才会去值，否则为 undefined。防止报，且可以一个默认值，这里就没给了。\n  const picUrl = (currentSong.al && currentSong.al.picUrl) || \"\";\n  const songName = currentSong.name || \"未知歌曲\";\n  const singerName = (currentSong.ar && currentSong.ar[0].name) || \"未知歌手\";\n  const duration = currentSong.dt || 0;\n  const showDuration = formatDate(duration, \"mm:ss\");\n  const showCurrentTime = formatDate(currentTime * 1000, \"mm:ss\");\n\n  //handle function\n  // 播放逻辑\n  const playMusic = useCallback(() => {\n    isPlaying ? audioRef.current.pause() : audioRef.current.play();\n    setIsPlaying(!isPlaying);\n  }, [isPlaying]);\n\n  // 播放条上的当前时间\n  const timeUpdate = (e) => {\n    const time = e.target.currentTime;\n    if (!isChanging) {\n      setCurrentTime(time);\n      setProgress(((currentTime * 1000) / duration) * 100);\n    }\n\n    // 获取当前时间的歌词\n    let i = 0;\n    for (; i < lyricList.length; i++) {\n      let lyricItem = lyricList[i];\n      // console.log(Ntime, \"@\", lyricItem.time, \"%\");\n      if (time * 1000 < lyricItem.time) {\n        break;\n      }\n    }\n\n    // console.log(lyricList[i - 1]);\n    if (currentLyricIndex !== i - 1) {\n      dispatch(changeCurrentLyricIndexAction(i - 1));\n      // 防止 i-1 为 -1， 取不到值而报错\n      const content = lyricList[i - 1] && lyricList[i - 1].content;\n      message.open({\n        key: \"lyric\",\n        content,\n        duration: 0,\n      });\n    }\n  };\n\n  // Slider是一个组定义组件，要往里面传递参数的时候，使用useCallback嵌套回调函数的时候，防止频繁重新定义\n  // 按下\n  const sliderChange = useCallback(\n    (value) => {\n      const time = ((value / 100) * duration) / 1000;\n      setProgress(value);\n      setCurrentTime(time);\n      setIsChanging(true);\n    },\n    [duration]\n  );\n  // 松开\n  const sliderAfterChange = useCallback(\n    (value) => {\n      const time = ((value / 100) * duration) / 1000;\n      audioRef.current.currentTime = time;\n      setCurrentTime(time);\n      setIsChanging(false);\n      if (!isPlaying) playMusic();\n    },\n    [duration, isPlaying, playMusic]\n  );\n\n  // 控制循环单曲随机播放\n  const changeSequence = () => {\n    const currentSequence = sequence === 2 ? 0 : sequence + 1;\n    dispatch(changeSequenceAction(currentSequence));\n  };\n\n  // 控制上一首，下一首切换\n  const changeMusic = (tag) => {\n    dispatch(changeSongPlayerAction(tag));\n  };\n\n  // 控制播放完毕后，自动切换下一首播放\n  const handleMusicEnded = () => {\n    if (sequence === 2) {\n      // 单曲循环\n      // 直接把播放时间设置为 0\n      audioRef.current.currentTime = 0;\n      audioRef.current.play();\n    } else {\n      // 随机/顺序播放\n      dispatch(changeSongPlayerAction(1));\n    }\n  };\n\n  return (\n    <PlaybarWrapper className=\"sprite_playbar\">\n      <div className=\"content wrap-v2\">\n        <Control isPlaying={isPlaying}>\n          <button\n            className=\"sprite_playbar prev\"\n            onClick={(e) => {\n              changeMusic(-1);\n            }}\n          ></button>\n          <button\n            className=\"sprite_playbar play\"\n            onClick={(e) => playMusic()}\n          ></button>\n          <button\n            className=\"sprite_playbar next\"\n            onClick={(e) => {\n              changeMusic(1);\n            }}\n          ></button>\n        </Control>\n        <PlayInfo>\n          <div className=\"image\">\n            <NavLink to=\"/player\">\n              <img src={getSizeImage(picUrl, 35)} alt=\"音乐\" />\n            </NavLink>\n          </div>\n          <div className=\"info\">\n            <div className=\"song\">\n              <a href=\"/todo\" className=\"song-name\">\n                {songName}\n              </a>\n              <a href=\"/todo\" className=\"singer-name\">\n                {singerName}\n              </a>\n            </div>\n            <div className=\"progress\">\n              <Slider\n                tipFormatter={null}\n                value={progress}\n                onChange={sliderChange}\n                onAfterChange={sliderAfterChange}\n              />\n              <div className=\"time\">\n                <span className=\"now-time\">{showCurrentTime}</span>\n                <span className=\"divider\">/</span>\n                <span className=\"duration\">{showDuration}</span>\n              </div>\n            </div>\n          </div>\n        </PlayInfo>\n        <Operator sequence={sequence}>\n          <div className=\"left\">\n            <button className=\"playerbar_pip btn pip\"></button>\n            <button className=\"sprite_playbar btn favor\"></button>\n            <button className=\"sprite_playbar btn share\"></button>\n          </div>\n          <div className=\"right sprite_playbar\">\n            <button\n              className=\"sprite_playbar btn volume\"\n              onClick={(e) => setShowVolumn(!showVolumn)}\n            ></button>\n            <button\n              className=\"sprite_playbar btn loop\"\n              onClick={(e) => {\n                changeSequence();\n              }}\n            ></button>\n            <button\n              className=\"sprite_playbar btn playlist\"\n              onClick={(e) => setShowPannel(!showPannel)}\n            >\n              {playList.length}\n            </button>\n          </div>\n        </Operator>\n        <audio\n          ref={audioRef}\n          onTimeUpdate={timeUpdate}\n          onEnded={(e) => {\n            handleMusicEnded();\n          }}\n        />\n        {showVolumn && <LJPlayerVolume />}\n        {showPannel && <LJPlayerPanel />}\n      </div>\n    </PlaybarWrapper>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}