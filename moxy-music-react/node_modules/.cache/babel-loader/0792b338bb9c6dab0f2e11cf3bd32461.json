{"ast":null,"code":"var _jsxFileName = \"F:\\\\ReactTea\\\\moxy-music-react\\\\src\\\\pages\\\\player\\\\app-player-bar\\\\c-cpns\\\\app-player-panel\\\\c-cnps\\\\player-lyric\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { memo, useEffect, useRef } from \"react\";\nimport { shallowEqual, useSelector } from \"react-redux\";\nimport classNames from \"classnames\";\nimport { scrollTo } from \"@/utils/ui-helper\";\nimport { PlayerLyricWrapper } from \"./style\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default _c2 = /*#__PURE__*/memo(_c = _s(function LJPlayerLyric() {\n  _s();\n\n  // redux hooks\n  const {\n    currentLyrics,\n    currentLyricIndex\n  } = useSelector(state => ({\n    currentLyrics: state.getIn([\"player\", \"currentLyrics\"]),\n    currentLyricIndex: state.getIn([\"player\", \"currentLyricIndex\"])\n  }), shallowEqual); // react hooks\n\n  const lyricRef = useRef();\n  useEffect(() => {\n    if (currentLyricIndex > 0 && currentLyricIndex < 3) return;\n    scrollTo(lyricRef.current, (currentLyricIndex - 3) * 32, 300);\n  }, [currentLyricIndex]);\n  return /*#__PURE__*/_jsxDEV(PlayerLyricWrapper, {\n    ref: lyricRef,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"lrc-content\",\n      children: currentLyrics.map((item, index) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classNames(\"lrc-item\", {\n            active: index === currentLyricIndex\n          }),\n          children: item.content\n        }, item.time, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}, \"V3Dlij7cjMyFJ7MZKZfw2Asexnc=\", false, function () {\n  return [useSelector];\n}));\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"%default%$memo\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["F:/ReactTea/moxy-music-react/src/pages/player/app-player-bar/c-cpns/app-player-panel/c-cnps/player-lyric/index.js"],"names":["React","memo","useEffect","useRef","shallowEqual","useSelector","classNames","scrollTo","PlayerLyricWrapper","LJPlayerLyric","currentLyrics","currentLyricIndex","state","getIn","lyricRef","current","map","item","index","active","content","time"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,SAAtB,EAAiCC,MAAjC,QAA+C,OAA/C;AACA,SAASC,YAAT,EAAuBC,WAAvB,QAA0C,aAA1C;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,SAASC,QAAT,QAAyB,mBAAzB;AAEA,SAASC,kBAAT,QAAmC,SAAnC;;AAEA,kCAAeP,IAAI,SAAC,SAASQ,aAAT,GAAyB;AAAA;;AAC3C;AACA,QAAM;AAAEC,IAAAA,aAAF;AAAiBC,IAAAA;AAAjB,MAAuCN,WAAW,CACrDO,KAAD,KAAY;AACVF,IAAAA,aAAa,EAAEE,KAAK,CAACC,KAAN,CAAY,CAAC,QAAD,EAAW,eAAX,CAAZ,CADL;AAEVF,IAAAA,iBAAiB,EAAEC,KAAK,CAACC,KAAN,CAAY,CAAC,QAAD,EAAW,mBAAX,CAAZ;AAFT,GAAZ,CADsD,EAKtDT,YALsD,CAAxD,CAF2C,CAU3C;;AACA,QAAMU,QAAQ,GAAGX,MAAM,EAAvB;AACAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIS,iBAAiB,GAAG,CAApB,IAAyBA,iBAAiB,GAAG,CAAjD,EAAoD;AACpDJ,IAAAA,QAAQ,CAACO,QAAQ,CAACC,OAAV,EAAmB,CAACJ,iBAAiB,GAAG,CAArB,IAA0B,EAA7C,EAAiD,GAAjD,CAAR;AACD,GAHQ,EAGN,CAACA,iBAAD,CAHM,CAAT;AAKA,sBACE,QAAC,kBAAD;AAAoB,IAAA,GAAG,EAAEG,QAAzB;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,gBACGJ,aAAa,CAACM,GAAd,CAAkB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAClC,4BACE;AAEE,UAAA,SAAS,EAAEZ,UAAU,CAAC,UAAD,EAAa;AAChCa,YAAAA,MAAM,EAAED,KAAK,KAAKP;AADc,WAAb,CAFvB;AAAA,oBAMGM,IAAI,CAACG;AANR,WACOH,IAAI,CAACI,IADZ;AAAA;AAAA;AAAA;AAAA,gBADF;AAUD,OAXA;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD,CAnCkB;AAAA,UAE4BhB,WAF5B;AAAA,GAAnB","sourcesContent":["import React, { memo, useEffect, useRef } from \"react\";\r\nimport { shallowEqual, useSelector } from \"react-redux\";\r\nimport classNames from \"classnames\";\r\n\r\nimport { scrollTo } from \"@/utils/ui-helper\";\r\n\r\nimport { PlayerLyricWrapper } from \"./style\";\r\n\r\nexport default memo(function LJPlayerLyric() {\r\n  // redux hooks\r\n  const { currentLyrics, currentLyricIndex } = useSelector(\r\n    (state) => ({\r\n      currentLyrics: state.getIn([\"player\", \"currentLyrics\"]),\r\n      currentLyricIndex: state.getIn([\"player\", \"currentLyricIndex\"]),\r\n    }),\r\n    shallowEqual\r\n  );\r\n\r\n  // react hooks\r\n  const lyricRef = useRef();\r\n  useEffect(() => {\r\n    if (currentLyricIndex > 0 && currentLyricIndex < 3) return;\r\n    scrollTo(lyricRef.current, (currentLyricIndex - 3) * 32, 300);\r\n  }, [currentLyricIndex]);\r\n\r\n  return (\r\n    <PlayerLyricWrapper ref={lyricRef}>\r\n      <div className=\"lrc-content\">\r\n        {currentLyrics.map((item, index) => {\r\n          return (\r\n            <div\r\n              key={item.time}\r\n              className={classNames(\"lrc-item\", {\r\n                active: index === currentLyricIndex,\r\n              })}\r\n            >\r\n              {item.content}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </PlayerLyricWrapper>\r\n  );\r\n});\r\n"]},"metadata":{},"sourceType":"module"}