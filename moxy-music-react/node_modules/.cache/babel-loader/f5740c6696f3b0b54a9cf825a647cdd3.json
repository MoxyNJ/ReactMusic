{"ast":null,"code":"var _jsxFileName = \"F:\\\\ReactTea\\\\moxy-music-react\\\\src\\\\pages\\\\discover\\\\c-pages\\\\recommend\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { memo, useEffect } from \"react\";\nimport { useDispatch, useSelector, shallowEqual } from \"react-redux\";\nimport { getTopBannerAction } from \"./store/actionCreators\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction LJRecommend(props) {\n  _s();\n\n  // 利用 redux hooks\n  // 组件和redux关联：获取数据state和操作的XXXAction\n  // ---- 24课：02：10：00\n  // 拿到stata方式\n  // 两个参数：回调函数 +\n  // ---- 回调函数\n  // ---- 回调函数有一个参数 state，就是store的全部state\n  // ---- 这个回调函数会有一个返回值，这个返回值会赋值给左侧的变量 *里面*。\n  // ---- 左侧变量接内接受到这个属性，然后通过解构赋值，直接拿到。\n  // ----\n  // ---- 性能优化\n  // ---- connect的mapStateToProps会把state和组件形成依赖，进而如果依赖的数据没有改变，这个组件也不会被重新渲染，节约开销\n  // ---- 但是使用useSelector如果只传入第一个参数，就不会有这种浅对比，只要有state发生变化，就会重新渲染组件。\n  // ---- useSelector使用的是“===”来比较，但是每次返回的有state的对象，都是新创建的，所以一定不相等，一定会重新渲染。\n  // ---- 解决方案：shallowEqual的引入\n  // ---- 直接传入 shallowEqual 为第二个参数即可。\n  // ----\n  // ----\n  const {\n    topBanners\n  } = useSelector(state => ({\n    topBanners: state.recommend.get(\"topBanners\")\n  }), shallowEqual); // 拿到dispatch方式\n\n  const dispatch = useDispatch(); // 发送网络请求\n  // 依赖：一般不会发生dispatth改变，但保险起见，加上依赖。\n  // ------ 因为dispatch发生改变，需要页面重新渲染\n\n  useEffect(() => {\n    console.log(dispatch);\n    dispatch(getTopBannerAction());\n  }, [dispatch]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"LJRecommend\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: topBanners.length\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n\n_s(LJRecommend, \"3ZVa7aNbuO0jsmaf/NXn9jfXApc=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = LJRecommend;\nexport default _c2 = /*#__PURE__*/memo(LJRecommend);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"LJRecommend\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["F:/ReactTea/moxy-music-react/src/pages/discover/c-pages/recommend/index.js"],"names":["React","memo","useEffect","useDispatch","useSelector","shallowEqual","getTopBannerAction","LJRecommend","props","topBanners","state","recommend","get","dispatch","console","log","length"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,SAAtB,QAAuC,OAAvC;AAEA,SAASC,WAAT,EAAsBC,WAAtB,EAAmCC,YAAnC,QAAuD,aAAvD;AAEA,SAASC,kBAAT,QAAmC,wBAAnC;;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAAA;;AAC1B;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAiBL,WAAW,CAC/BM,KAAD,KAAY;AACVD,IAAAA,UAAU,EAAEC,KAAK,CAACC,SAAN,CAAgBC,GAAhB,CAAoB,YAApB;AADF,GAAZ,CADgC,EAIhCP,YAJgC,CAAlC,CApB0B,CA2B1B;;AACA,QAAMQ,QAAQ,GAAGV,WAAW,EAA5B,CA5B0B,CA8B1B;AACA;AACA;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACAA,IAAAA,QAAQ,CAACP,kBAAkB,EAAnB,CAAR;AACD,GAHQ,EAGN,CAACO,QAAD,CAHM,CAAT;AAKA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,gBAAKJ,UAAU,CAACO;AAAhB;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;;GA5CQT,W;UAoBgBH,W,EAQND,W;;;KA5BVI,W;AA8CT,kCAAeN,IAAI,CAACM,WAAD,CAAnB","sourcesContent":["import React, { memo, useEffect } from \"react\";\r\n\r\nimport { useDispatch, useSelector, shallowEqual } from \"react-redux\";\r\n\r\nimport { getTopBannerAction } from \"./store/actionCreators\";\r\n\r\nfunction LJRecommend(props) {\r\n  // 利用 redux hooks\r\n  // 组件和redux关联：获取数据state和操作的XXXAction\r\n\r\n  // ---- 24课：02：10：00\r\n  // 拿到stata方式\r\n  // 两个参数：回调函数 +\r\n  // ---- 回调函数\r\n  // ---- 回调函数有一个参数 state，就是store的全部state\r\n  // ---- 这个回调函数会有一个返回值，这个返回值会赋值给左侧的变量 *里面*。\r\n  // ---- 左侧变量接内接受到这个属性，然后通过解构赋值，直接拿到。\r\n  // ----\r\n  // ---- 性能优化\r\n  // ---- connect的mapStateToProps会把state和组件形成依赖，进而如果依赖的数据没有改变，这个组件也不会被重新渲染，节约开销\r\n  // ---- 但是使用useSelector如果只传入第一个参数，就不会有这种浅对比，只要有state发生变化，就会重新渲染组件。\r\n  // ---- useSelector使用的是“===”来比较，但是每次返回的有state的对象，都是新创建的，所以一定不相等，一定会重新渲染。\r\n  // ---- 解决方案：shallowEqual的引入\r\n  // ---- 直接传入 shallowEqual 为第二个参数即可。\r\n  // ----\r\n  // ----\r\n  const { topBanners } = useSelector(\r\n    (state) => ({\r\n      topBanners: state.recommend.get(\"topBanners\"),\r\n    }),\r\n    shallowEqual\r\n  );\r\n\r\n  // 拿到dispatch方式\r\n  const dispatch = useDispatch();\r\n\r\n  // 发送网络请求\r\n  // 依赖：一般不会发生dispatth改变，但保险起见，加上依赖。\r\n  // ------ 因为dispatch发生改变，需要页面重新渲染\r\n  useEffect(() => {\r\n    console.log(dispatch);\r\n    dispatch(getTopBannerAction());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div>\r\n      <h2>LJRecommend</h2>\r\n      <h2>{topBanners.length}</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default memo(LJRecommend);\r\n"]},"metadata":{},"sourceType":"module"}