{"ast":null,"code":"import * as actionTypes from \"./constants\";\nimport { getSongDetail, getLyric } from \"@/services/player\";\nimport { getRandomNumber } from \"@/utils/math-utils\";\nimport { parseLyric } from \"@/utils/parse-lyric\"; // 不对外暴露的区域\n\nconst changeCurrentSongAction = res => ({\n  type: actionTypes.CHANGE_CURRENT_SONG,\n  currentSong: res\n});\n\nconst changePlayListAction = playList => ({\n  type: actionTypes.CHANGE_PLAY_LIST,\n  playList\n});\n\nconst changeCurrentSongIndexAction = index => ({\n  type: actionTypes.CHANGE_CURRENT_SONG_INDEX,\n  index\n}); // 把歌词添加到 store 中\n\n\nconst changelyricListAction = lyricList => ({\n  type: actionTypes.CHANGE_LYRIC_LIST,\n  lyricList\n}); // 对外暴露的区域\n\n\nexport const changeSequenceAction = sequence => ({\n  type: actionTypes.CHANGE_SEQUENCE,\n  sequence\n}); // 上一首，下一首 的切换，采用异步action方式\n\nexport const changeSongPlayerAction = tag => {\n  return (dispatch, getState) => {\n    const playList = getState().getIn([\"player\", \"playList\"]);\n    const sequence = getState().getIn([\"player\", \"sequence\"]);\n    let currentSongIndex = getState().getIn([\"player\", \"currentSongIndex\"]);\n\n    switch (sequence) {\n      case 1:\n        // 随机播放\n        let randomIndex = getRandomNumber(playList.length);\n\n        while (randomIndex === currentSongIndex) {\n          randomIndex = getRandomNumber(playList.length);\n        }\n\n        currentSongIndex = randomIndex;\n        break;\n\n      default:\n        // 其他播放\n        currentSongIndex += tag;\n        if (currentSongIndex >= playList.length) currentSongIndex = 0;\n        if (currentSongIndex < 0) currentSongIndex = playList.length - 1;\n        break;\n    }\n\n    const currentSong = playList[currentSongIndex];\n    dispatch(changeCurrentSongAction(currentSong));\n    dispatch(changeCurrentSongIndexAction(currentSongIndex)); // 请求该歌曲的歌词\n\n    dispatch(getLyricAction(currentSong.id));\n  };\n}; // 添加歌曲/第一次打开页面时，获取歌曲信息\n\nexport const getSongDetailAction = idx => {\n  return (dispatch, getState) => {\n    // 1.根据ids查找playList中是否已经有该歌曲\n    const playList = getState().getIn([\"player\", \"playList\"]);\n    const songIndex = playList.findIndex(item => item.id === idx); // 2.判断是否找到歌曲\n    // 如果返回的是大于0的下标，则表明找到了。\n\n    if (songIndex !== -1) {\n      dispatch(changeCurrentSongIndexAction(songIndex));\n      const song = playList[songIndex];\n      console.log(song);\n      dispatch(changeCurrentSongAction(song)); // 3 请求该歌曲的歌词\n\n      dispatch(getLyricAction(song.id));\n    } else {\n      // 如果返回的是-1，则表明没找到，则请求歌曲\n      getSongDetail(idx).then(res => {\n        // res.songs && 防止 songs 是 undefined\n        const song = res.songs && res.songs[0]; // !song 防止 song 是 undefined，如果是 undefined什么也不做，直接结束执行\n\n        if (!song) return; // 1.将最新请求的歌曲添加到播放列表中\n\n        const newPlayList = [...playList];\n        newPlayList.push(song); // 2.更新redux中的值\n\n        dispatch(changePlayListAction(newPlayList));\n        dispatch(changeCurrentSongIndexAction(newPlayList.length - 1));\n        dispatch(changeCurrentSongAction(song)); // 3 请求该歌曲的歌词\n\n        dispatch(getLyricAction(song.id));\n      });\n    }\n  };\n}; // 对应 id 的获取歌词\n\nexport const getLyricAction = id => {\n  return dispatch => {\n    getLyric(id).then(res => {\n      const lyric = res.lrc.lyric;\n      const lyricList = parseLyric(lyric);\n      dispatch(changelyricListAction(lyricList));\n    });\n  };\n};","map":{"version":3,"sources":["F:/ReactTea/moxy-music-react/src/pages/player/store/actionCreators.js"],"names":["actionTypes","getSongDetail","getLyric","getRandomNumber","parseLyric","changeCurrentSongAction","res","type","CHANGE_CURRENT_SONG","currentSong","changePlayListAction","playList","CHANGE_PLAY_LIST","changeCurrentSongIndexAction","index","CHANGE_CURRENT_SONG_INDEX","changelyricListAction","lyricList","CHANGE_LYRIC_LIST","changeSequenceAction","sequence","CHANGE_SEQUENCE","changeSongPlayerAction","tag","dispatch","getState","getIn","currentSongIndex","randomIndex","length","getLyricAction","id","getSongDetailAction","idx","songIndex","findIndex","item","song","console","log","then","songs","newPlayList","push","lyric","lrc"],"mappings":"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","sourcesContent":["import * as actionTypes from \"./constants\";\r\n\r\nimport { getSongDetail, getLyric } from \"@/services/player\";\r\nimport { getRandomNumber } from \"@/utils/math-utils\";\r\nimport { parseLyric } from \"@/utils/parse-lyric\";\r\n\r\n// 不对外暴露的区域\r\nconst changeCurrentSongAction = (res) => ({\r\n  type: actionTypes.CHANGE_CURRENT_SONG,\r\n  currentSong: res,\r\n});\r\n\r\nconst changePlayListAction = (playList) => ({\r\n  type: actionTypes.CHANGE_PLAY_LIST,\r\n  playList,\r\n});\r\n\r\nconst changeCurrentSongIndexAction = (index) => ({\r\n  type: actionTypes.CHANGE_CURRENT_SONG_INDEX,\r\n  index,\r\n});\r\n\r\n// 把歌词添加到 store 中\r\nconst changelyricListAction = (lyricList) => ({\r\n  type: actionTypes.CHANGE_LYRIC_LIST,\r\n  lyricList,\r\n});\r\n\r\n// 对外暴露的区域\r\nexport const changeSequenceAction = (sequence) => ({\r\n  type: actionTypes.CHANGE_SEQUENCE,\r\n  sequence,\r\n});\r\n\r\n// 上一首，下一首 的切换，采用异步action方式\r\nexport const changeSongPlayerAction = (tag) => {\r\n  return (dispatch, getState) => {\r\n    const playList = getState().getIn([\"player\", \"playList\"]);\r\n    const sequence = getState().getIn([\"player\", \"sequence\"]);\r\n    let currentSongIndex = getState().getIn([\"player\", \"currentSongIndex\"]);\r\n    switch (sequence) {\r\n      case 1: // 随机播放\r\n        let randomIndex = getRandomNumber(playList.length);\r\n        while (randomIndex === currentSongIndex) {\r\n          randomIndex = getRandomNumber(playList.length);\r\n        }\r\n        currentSongIndex = randomIndex;\r\n        break;\r\n      default:\r\n        // 其他播放\r\n        currentSongIndex += tag;\r\n        if (currentSongIndex >= playList.length) currentSongIndex = 0;\r\n        if (currentSongIndex < 0) currentSongIndex = playList.length - 1;\r\n        break;\r\n    }\r\n    const currentSong = playList[currentSongIndex];\r\n    dispatch(changeCurrentSongAction(currentSong));\r\n    dispatch(changeCurrentSongIndexAction(currentSongIndex));\r\n\r\n    // 请求该歌曲的歌词\r\n    dispatch(getLyricAction(currentSong.id));\r\n  };\r\n};\r\n\r\n// 添加歌曲/第一次打开页面时，获取歌曲信息\r\nexport const getSongDetailAction = (idx) => {\r\n  return (dispatch, getState) => {\r\n    // 1.根据ids查找playList中是否已经有该歌曲\r\n    const playList = getState().getIn([\"player\", \"playList\"]);\r\n    const songIndex = playList.findIndex((item) => item.id === idx);\r\n\r\n    // 2.判断是否找到歌曲\r\n    // 如果返回的是大于0的下标，则表明找到了。\r\n    if (songIndex !== -1) {\r\n      dispatch(changeCurrentSongIndexAction(songIndex));\r\n      const song = playList[songIndex];\r\n      console.log(song);\r\n      dispatch(changeCurrentSongAction(song));\r\n\r\n      // 3 请求该歌曲的歌词\r\n      dispatch(getLyricAction(song.id));\r\n    } else {\r\n      // 如果返回的是-1，则表明没找到，则请求歌曲\r\n      getSongDetail(idx).then((res) => {\r\n        // res.songs && 防止 songs 是 undefined\r\n        const song = res.songs && res.songs[0];\r\n        // !song 防止 song 是 undefined，如果是 undefined什么也不做，直接结束执行\r\n        if (!song) return;\r\n        // 1.将最新请求的歌曲添加到播放列表中\r\n        const newPlayList = [...playList];\r\n        newPlayList.push(song);\r\n\r\n        // 2.更新redux中的值\r\n        dispatch(changePlayListAction(newPlayList));\r\n        dispatch(changeCurrentSongIndexAction(newPlayList.length - 1));\r\n        dispatch(changeCurrentSongAction(song));\r\n\r\n        // 3 请求该歌曲的歌词\r\n        dispatch(getLyricAction(song.id));\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\n// 对应 id 的获取歌词\r\nexport const getLyricAction = (id) => {\r\n  return (dispatch) => {\r\n    getLyric(id).then((res) => {\r\n      const lyric = res.lrc.lyric;\r\n      const lyricList = parseLyric(lyric);\r\n      dispatch(changelyricListAction(lyricList));\r\n    });\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}