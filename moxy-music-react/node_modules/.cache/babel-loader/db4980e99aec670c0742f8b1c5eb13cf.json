{"ast":null,"code":"var _jsxFileName = \"F:\\\\ReactTea\\\\moxy-music-react\\\\src\\\\pages\\\\discover\\\\c-pages\\\\recommend\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { memo, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getTopBannerAction } from \"./store/actionCreators\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction LJRecommend(props) {\n  _s();\n\n  // 利用 redux hooks\n  // 组件和redux关联：获取数据state和操作的XXXAction\n  // 拿到stata方式\n  // 两个参数：回调函数 +\n  // ---- 回调函数有一个参数 state，就是store的全部state\n  // ----\n  // ----\n  const recommend = useSelector(); // 直接拿到dispatch\n\n  const dispatch = useDispatch(); // 发送网络请求\n  // 依赖：一般不会发生dispatth改变，但保险起见，加上依赖。\n  // ------ 因为dispatch发生改变，需要页面重新渲染\n\n  useEffect(() => {\n    console.log(dispatch);\n    dispatch(getTopBannerAction());\n  }, [dispatch]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"LJRecommend\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \" \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n\n_s(LJRecommend, \"73X2yJCLvRD+sXx+73LnId2pwy0=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = LJRecommend;\nexport default _c2 = /*#__PURE__*/memo(LJRecommend);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"LJRecommend\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["F:/ReactTea/moxy-music-react/src/pages/discover/c-pages/recommend/index.js"],"names":["React","memo","useEffect","useDispatch","useSelector","getTopBannerAction","LJRecommend","props","recommend","dispatch","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,SAAtB,QAAuC,OAAvC;AAEA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,SAASC,kBAAT,QAAmC,wBAAnC;;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAAA;;AAC1B;AACA;AAEA;AACA;AACA;AACA;AACA;AACA,QAAMC,SAAS,GAAGJ,WAAW,EAA7B,CAT0B,CAW1B;;AACA,QAAMK,QAAQ,GAAGN,WAAW,EAA5B,CAZ0B,CAc1B;AACA;AACA;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACAA,IAAAA,QAAQ,CAACJ,kBAAkB,EAAnB,CAAR;AACD,GAHQ,EAGN,CAACI,QAAD,CAHM,CAAT;AAKA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;;GA5BQH,W;UASWF,W,EAGDD,W;;;KAZVG,W;AA8BT,kCAAeL,IAAI,CAACK,WAAD,CAAnB","sourcesContent":["import React, { memo, useEffect } from \"react\";\r\n\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { getTopBannerAction } from \"./store/actionCreators\";\r\n\r\nfunction LJRecommend(props) {\r\n  // 利用 redux hooks\r\n  // 组件和redux关联：获取数据state和操作的XXXAction\r\n\r\n  // 拿到stata方式\r\n  // 两个参数：回调函数 +\r\n  // ---- 回调函数有一个参数 state，就是store的全部state\r\n  // ----\r\n  // ----\r\n  const recommend = useSelector();\r\n\r\n  // 直接拿到dispatch\r\n  const dispatch = useDispatch();\r\n\r\n  // 发送网络请求\r\n  // 依赖：一般不会发生dispatth改变，但保险起见，加上依赖。\r\n  // ------ 因为dispatch发生改变，需要页面重新渲染\r\n  useEffect(() => {\r\n    console.log(dispatch);\r\n    dispatch(getTopBannerAction());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div>\r\n      <h2>LJRecommend</h2>\r\n      <h2> </h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default memo(LJRecommend);\r\n"]},"metadata":{},"sourceType":"module"}