{"ast":null,"code":"var _jsxFileName = \"F:\\\\ReactTea\\\\moxy-music-react\\\\src\\\\pages\\\\player\\\\app-player-bar\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { memo, useState, useEffect, useRef, useCallback } from \"react\";\nimport { useDispatch, useSelector, shallowEqual } from \"react-redux\";\nimport { NavLink } from \"react-router-dom\";\nimport { Slider } from \"antd\";\nimport { getSizeImage, formatDate, getPlayUrl } from \"@/utils/format-utils\";\nimport { getSongDetailAction, changeSequenceAction, changeSongPlayerAction } from \"../store/actionCreators\";\nimport { PlaybarWrapper, Control, PlayInfo, Operator } from \"./style\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default _c2 = /*#__PURE__*/memo(_c = _s(function LJAppPlayBar() {\n  _s();\n\n  // component state：      组件内部的state\n  const [currentTime, setCurrentTime] = useState(0);\n  const [progress, setProgress] = useState(0);\n  const [isChanging, setIsChanging] = useState(false);\n  const [isPlaying, setIsPlaying] = useState(false); // redux hooks：          获取state和dispatch\n\n  const {\n    currentSong,\n    sequence\n  } = useSelector(state => ({\n    currentSong: state.getIn([\"player\", \"currentSong\"]),\n    sequence: state.getIn([\"player\", \"sequence\"])\n  }), shallowEqual);\n  const dispatch = useDispatch();\n  const audioRef = useRef(); // other hooks：          react的hooks\n\n  useEffect(() => {\n    dispatch(getSongDetailAction(1858069368));\n  }, [dispatch]);\n  useEffect(() => {\n    audioRef.current.src = getPlayUrl(currentSong.id);\n  }, [currentSong.id]); // other function：       组件内部的其他逻辑\n  // 判断如果有值，才会去值，否则为 undefined。防止报，且可以一个默认值，这里就没给了。\n\n  const picUrl = currentSong.al && currentSong.al.picUrl || \"\";\n  const songName = currentSong.name || \"未知歌曲\";\n  const singerName = currentSong.ar && currentSong.ar[0].name || \"未知歌手\";\n  const duration = currentSong.dt || 0;\n  const showDuration = formatDate(duration, \"mm:ss\");\n  const showCurrentTime = formatDate(currentTime * 1000, \"mm:ss\"); //handle function\n  // 播放逻辑\n\n  const playMusic = useCallback(() => {\n    isPlaying ? audioRef.current.pause() : audioRef.current.play();\n    setIsPlaying(!isPlaying);\n  }, [isPlaying]); // 播放条上的当前时间\n\n  const timeUpdate = e => {\n    const time = e.target.currentTime;\n\n    if (!isChanging) {\n      setCurrentTime(time);\n      setProgress(currentTime * 1000 / duration * 100);\n    }\n  }; // Slider是一个组定义组件，要往里面传递参数的时候，使用useCallback嵌套回调函数的时候，防止频繁重新定义\n  // 按下\n\n\n  const sliderChange = useCallback(value => {\n    const time = value / 100 * duration / 1000;\n    setProgress(value);\n    setCurrentTime(time);\n    setIsChanging(true);\n  }, [duration]); // 松开\n\n  const sliderAfterChange = useCallback(value => {\n    const time = value / 100 * duration / 1000;\n    audioRef.current.currentTime = time;\n    setCurrentTime(time);\n    setIsChanging(false);\n    if (!isPlaying) playMusic();\n  }, [duration, isPlaying, playMusic]); // 控制循环单曲随机播放\n\n  const changeSequence = () => {\n    const currentSequence = sequence === 2 ? 0 : sequence + 1;\n    dispatch(changeSequenceAction(currentSequence));\n  }; // 控制上一首，下一首切换\n\n\n  const changeMusic = tag => {\n    dispatch(changeSongPlayerAction(tag));\n  };\n\n  return /*#__PURE__*/_jsxDEV(PlaybarWrapper, {\n    className: \"sprite_playbar\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content wrap-v2\",\n      children: [/*#__PURE__*/_jsxDEV(Control, {\n        isPlaying: isPlaying,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"sprite_playbar prev\",\n          onClick: e => {\n            changeMusic(-1);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"sprite_playbar play\",\n          onClick: e => playMusic()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"sprite_playbar next\",\n          onClick: e => {\n            changeMusic(1);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PlayInfo, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"image\",\n          children: /*#__PURE__*/_jsxDEV(NavLink, {\n            to: \"/player\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: getSizeImage(picUrl, 35),\n              alt: \"\\u97F3\\u4E50\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"info\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"song\",\n            children: [/*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"/todo\",\n              className: \"song-name\",\n              children: songName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"/todo\",\n              className: \"singer-name\",\n              children: singerName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"progress\",\n            children: [/*#__PURE__*/_jsxDEV(Slider, {\n              tipFormatter: null,\n              value: progress,\n              onChange: sliderChange,\n              onAfterChange: sliderAfterChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"time\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"now-time\",\n                children: showCurrentTime\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 147,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"divider\",\n                children: \"/\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 148,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"duration\",\n                children: showDuration\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 149,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Operator, {\n        sequence: sequence,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"left\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"playerbar_pip btn pip\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"sprite_playbar btn favor\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"sprite_playbar btn share\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"right sprite_playbar\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"sprite_playbar btn volume\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"sprite_playbar btn loop\",\n            onClick: e => {\n              changeSequence();\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"sprite_playbar btn playlist\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n        ref: audioRef,\n        onTimeUpdate: timeUpdate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n}, \"uzG4Mn0px6gZXmp/tl0y/XnRlMY=\", false, function () {\n  return [useSelector, useDispatch];\n}));\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"%default%$memo\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["F:/ReactTea/moxy-music-react/src/pages/player/app-player-bar/index.js"],"names":["React","memo","useState","useEffect","useRef","useCallback","useDispatch","useSelector","shallowEqual","NavLink","Slider","getSizeImage","formatDate","getPlayUrl","getSongDetailAction","changeSequenceAction","changeSongPlayerAction","PlaybarWrapper","Control","PlayInfo","Operator","LJAppPlayBar","currentTime","setCurrentTime","progress","setProgress","isChanging","setIsChanging","isPlaying","setIsPlaying","currentSong","sequence","state","getIn","dispatch","audioRef","current","src","id","picUrl","al","songName","name","singerName","ar","duration","dt","showDuration","showCurrentTime","playMusic","pause","play","timeUpdate","e","time","target","sliderChange","value","sliderAfterChange","changeSequence","currentSequence","changeMusic","tag"],"mappings":"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","sourcesContent":["import React, { memo, useState, useEffect, useRef, useCallback } from \"react\";\r\nimport { useDispatch, useSelector, shallowEqual } from \"react-redux\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { Slider } from \"antd\";\r\n\r\nimport { getSizeImage, formatDate, getPlayUrl } from \"@/utils/format-utils\";\r\nimport {\r\n  getSongDetailAction,\r\n  changeSequenceAction,\r\n  changeSongPlayerAction,\r\n} from \"../store/actionCreators\";\r\n\r\nimport { PlaybarWrapper, Control, PlayInfo, Operator } from \"./style\";\r\n\r\nexport default memo(function LJAppPlayBar() {\r\n  // component state：      组件内部的state\r\n  const [currentTime, setCurrentTime] = useState(0);\r\n  const [progress, setProgress] = useState(0);\r\n  const [isChanging, setIsChanging] = useState(false);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n\r\n  // redux hooks：          获取state和dispatch\r\n  const { currentSong, sequence } = useSelector(\r\n    (state) => ({\r\n      currentSong: state.getIn([\"player\", \"currentSong\"]),\r\n      sequence: state.getIn([\"player\", \"sequence\"]),\r\n    }),\r\n    shallowEqual\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const audioRef = useRef();\r\n\r\n  // other hooks：          react的hooks\r\n  useEffect(() => {\r\n    dispatch(getSongDetailAction(1858069368));\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    audioRef.current.src = getPlayUrl(currentSong.id);\r\n  }, [currentSong.id]);\r\n\r\n  // other function：       组件内部的其他逻辑\r\n  // 判断如果有值，才会去值，否则为 undefined。防止报，且可以一个默认值，这里就没给了。\r\n  const picUrl = (currentSong.al && currentSong.al.picUrl) || \"\";\r\n  const songName = currentSong.name || \"未知歌曲\";\r\n  const singerName = (currentSong.ar && currentSong.ar[0].name) || \"未知歌手\";\r\n  const duration = currentSong.dt || 0;\r\n  const showDuration = formatDate(duration, \"mm:ss\");\r\n  const showCurrentTime = formatDate(currentTime * 1000, \"mm:ss\");\r\n\r\n  //handle function\r\n  // 播放逻辑\r\n  const playMusic = useCallback(() => {\r\n    isPlaying ? audioRef.current.pause() : audioRef.current.play();\r\n    setIsPlaying(!isPlaying);\r\n  }, [isPlaying]);\r\n\r\n  // 播放条上的当前时间\r\n  const timeUpdate = (e) => {\r\n    const time = e.target.currentTime;\r\n    if (!isChanging) {\r\n      setCurrentTime(time);\r\n      setProgress(((currentTime * 1000) / duration) * 100);\r\n    }\r\n  };\r\n\r\n  // Slider是一个组定义组件，要往里面传递参数的时候，使用useCallback嵌套回调函数的时候，防止频繁重新定义\r\n  // 按下\r\n  const sliderChange = useCallback(\r\n    (value) => {\r\n      const time = ((value / 100) * duration) / 1000;\r\n      setProgress(value);\r\n      setCurrentTime(time);\r\n      setIsChanging(true);\r\n    },\r\n    [duration]\r\n  );\r\n  // 松开\r\n  const sliderAfterChange = useCallback(\r\n    (value) => {\r\n      const time = ((value / 100) * duration) / 1000;\r\n      audioRef.current.currentTime = time;\r\n      setCurrentTime(time);\r\n      setIsChanging(false);\r\n      if (!isPlaying) playMusic();\r\n    },\r\n    [duration, isPlaying, playMusic]\r\n  );\r\n\r\n  // 控制循环单曲随机播放\r\n  const changeSequence = () => {\r\n    const currentSequence = sequence === 2 ? 0 : sequence + 1;\r\n    dispatch(changeSequenceAction(currentSequence));\r\n  };\r\n\r\n  // 控制上一首，下一首切换\r\n  const changeMusic = (tag) => {\r\n    dispatch(changeSongPlayerAction(tag));\r\n  };\r\n\r\n  return (\r\n    <PlaybarWrapper className=\"sprite_playbar\">\r\n      <div className=\"content wrap-v2\">\r\n        <Control isPlaying={isPlaying}>\r\n          <button\r\n            className=\"sprite_playbar prev\"\r\n            onClick={(e) => {\r\n              changeMusic(-1);\r\n            }}\r\n          ></button>\r\n          <button\r\n            className=\"sprite_playbar play\"\r\n            onClick={(e) => playMusic()}\r\n          ></button>\r\n          <button\r\n            className=\"sprite_playbar next\"\r\n            onClick={(e) => {\r\n              changeMusic(1);\r\n            }}\r\n          ></button>\r\n        </Control>\r\n        <PlayInfo>\r\n          <div className=\"image\">\r\n            <NavLink to=\"/player\">\r\n              <img src={getSizeImage(picUrl, 35)} alt=\"音乐\" />\r\n            </NavLink>\r\n          </div>\r\n          <div className=\"info\">\r\n            <div className=\"song\">\r\n              <a href=\"/todo\" className=\"song-name\">\r\n                {songName}\r\n              </a>\r\n              <a href=\"/todo\" className=\"singer-name\">\r\n                {singerName}\r\n              </a>\r\n            </div>\r\n            <div className=\"progress\">\r\n              <Slider\r\n                tipFormatter={null}\r\n                value={progress}\r\n                onChange={sliderChange}\r\n                onAfterChange={sliderAfterChange}\r\n              />\r\n              <div className=\"time\">\r\n                <span className=\"now-time\">{showCurrentTime}</span>\r\n                <span className=\"divider\">/</span>\r\n                <span className=\"duration\">{showDuration}</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </PlayInfo>\r\n        <Operator sequence={sequence}>\r\n          <div className=\"left\">\r\n            <button className=\"playerbar_pip btn pip\"></button>\r\n            <button className=\"sprite_playbar btn favor\"></button>\r\n            <button className=\"sprite_playbar btn share\"></button>\r\n          </div>\r\n          <div className=\"right sprite_playbar\">\r\n            <button className=\"sprite_playbar btn volume\"></button>\r\n            <button\r\n              className=\"sprite_playbar btn loop\"\r\n              onClick={(e) => {\r\n                changeSequence();\r\n              }}\r\n            ></button>\r\n            <button className=\"sprite_playbar btn playlist\"></button>\r\n          </div>\r\n        </Operator>\r\n        <audio ref={audioRef} onTimeUpdate={timeUpdate} />\r\n      </div>\r\n    </PlaybarWrapper>\r\n  );\r\n});\r\n"]},"metadata":{},"sourceType":"module"}