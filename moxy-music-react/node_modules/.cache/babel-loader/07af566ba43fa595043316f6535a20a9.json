{"ast":null,"code":"import React,{memo}from\"react\";import{useSelector,useDispatch,shallowEqual}from\"react-redux\";import{changeCurrentCategoryAction,getSongCategoryListAction}from\"../../store/actionCreators\";import{SongsCategoryWrapper}from\"./style\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default/*#__PURE__*/memo(function LJSongsCategory(){// redux hooks\nvar _useSelector=useSelector(function(state){return{category:state.getIn([\"songList\",\"category\"])};},shallowEqual),category=_useSelector.category;var dispatch=useDispatch();// other handle\n// 当点击风格名称后:\n//   1. 改变CurrentCategory名称，\n//   2. 改变下方展示的内容，展示最开始的第\"0\"页。\nvar selectCategory=function selectCategory(name){dispatch(changeCurrentCategoryAction(name));dispatch(getSongCategoryListAction(0));};return/*#__PURE__*/_jsxs(SongsCategoryWrapper,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"arrow sprite_icon\"}),/*#__PURE__*/_jsx(\"div\",{className:\"all\",children:/*#__PURE__*/_jsx(\"span\",{className:\"link\",onClick:function onClick(e){return selectCategory(\"全部\");},children:\"\\u5168\\u90E8\\u98CE\\u683C\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"category\",children:category.map(function(item,index){return/*#__PURE__*/_jsxs(\"dl\",{className:\"item\"+index,children:[/*#__PURE__*/_jsxs(\"dt\",{children:[/*#__PURE__*/_jsx(\"i\",{className:\"icon sprite_icon2\"}),/*#__PURE__*/_jsx(\"span\",{children:item.name})]}),/*#__PURE__*/_jsx(\"dd\",{children:item.subs.map(function(value){return/*#__PURE__*/_jsxs(\"div\",{className:\"item\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"link\",onClick:function onClick(e){return selectCategory(value.name);},children:value.name}),/*#__PURE__*/_jsx(\"span\",{className:\"divider\",children:\"|\"})]},value.name);})})]},item.name);})})]});});","map":{"version":3,"sources":["/Users/moxy/ReactTea/moxy-music-react/src/pages/discover/c-pages/songList/c-cpns/songs-category/index.js"],"names":["React","memo","useSelector","useDispatch","shallowEqual","changeCurrentCategoryAction","getSongCategoryListAction","SongsCategoryWrapper","LJSongsCategory","state","category","getIn","dispatch","selectCategory","name","e","map","item","index","subs","value"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,IAAhB,KAA4B,OAA5B,CACA,OAASC,WAAT,CAAsBC,WAAtB,CAAmCC,YAAnC,KAAuD,aAAvD,CAEA,OACEC,2BADF,CAEEC,yBAFF,KAGO,4BAHP,CAKA,OAASC,oBAAT,KAAqC,SAArC,C,wFAEA,2BAAeN,IAAI,CAAC,QAASO,CAAAA,eAAT,EAA2B,CAC7C;AAD6C,iBAExBN,WAAW,CAC9B,SAACO,KAAD,QAAY,CACVC,QAAQ,CAAED,KAAK,CAACE,KAAN,CAAY,CAAC,UAAD,CAAa,UAAb,CAAZ,CADA,CAAZ,EAD8B,CAI9BP,YAJ8B,CAFa,CAErCM,QAFqC,cAErCA,QAFqC,CAQ7C,GAAME,CAAAA,QAAQ,CAAGT,WAAW,EAA5B,CAEA;AACA;AACA;AACA;AACA,GAAMU,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACC,IAAD,CAAU,CAC/BF,QAAQ,CAACP,2BAA2B,CAACS,IAAD,CAA5B,CAAR,CACAF,QAAQ,CAACN,yBAAyB,CAAC,CAAD,CAA1B,CAAR,CACD,CAHD,CAKA,mBACE,MAAC,oBAAD,yBACE,YAAK,SAAS,CAAC,mBAAf,EADF,cAEE,YAAK,SAAS,CAAC,KAAf,uBACE,aAAM,SAAS,CAAC,MAAhB,CAAuB,OAAO,CAAE,iBAACS,CAAD,QAAOF,CAAAA,cAAc,CAAC,IAAD,CAArB,EAAhC,sCADF,EAFF,cAOE,YAAK,SAAS,CAAC,UAAf,UACGH,QAAQ,CAACM,GAAT,CAAa,SAACC,IAAD,CAAOC,KAAP,CAAiB,CAC7B,mBACE,YAAoB,SAAS,CAAE,OAASA,KAAxC,wBACE,mCACE,UAAG,SAAS,CAAC,mBAAb,EADF,cAEE,sBAAOD,IAAI,CAACH,IAAZ,EAFF,GADF,cAKE,oBACGG,IAAI,CAACE,IAAL,CAAUH,GAAV,CAAc,SAACI,KAAD,CAAW,CACxB,mBACE,aAAK,SAAS,CAAC,MAAf,wBACE,aACE,SAAS,CAAC,MADZ,CAEE,OAAO,CAAE,iBAACL,CAAD,QAAOF,CAAAA,cAAc,CAACO,KAAK,CAACN,IAAP,CAArB,EAFX,UAIGM,KAAK,CAACN,IAJT,EADF,cAOE,aAAM,SAAS,CAAC,SAAhB,eAPF,GAA2BM,KAAK,CAACN,IAAjC,CADF,CAWD,CAZA,CADH,EALF,GAASG,IAAI,CAACH,IAAd,CADF,CAuBD,CAxBA,CADH,EAPF,GADF,CAqCD,CAxDkB,CAAnB","sourcesContent":["import React, { memo } from \"react\";\nimport { useSelector, useDispatch, shallowEqual } from \"react-redux\";\n\nimport {\n  changeCurrentCategoryAction,\n  getSongCategoryListAction,\n} from \"../../store/actionCreators\";\n\nimport { SongsCategoryWrapper } from \"./style\";\n\nexport default memo(function LJSongsCategory() {\n  // redux hooks\n  const { category } = useSelector(\n    (state) => ({\n      category: state.getIn([\"songList\", \"category\"]),\n    }),\n    shallowEqual\n  );\n  const dispatch = useDispatch();\n\n  // other handle\n  // 当点击风格名称后:\n  //   1. 改变CurrentCategory名称，\n  //   2. 改变下方展示的内容，展示最开始的第\"0\"页。\n  const selectCategory = (name) => {\n    dispatch(changeCurrentCategoryAction(name));\n    dispatch(getSongCategoryListAction(0));\n  };\n\n  return (\n    <SongsCategoryWrapper>\n      <div className=\"arrow sprite_icon\"></div>\n      <div className=\"all\">\n        <span className=\"link\" onClick={(e) => selectCategory(\"全部\")}>\n          全部风格\n        </span>\n      </div>\n      <div className=\"category\">\n        {category.map((item, index) => {\n          return (\n            <dl key={item.name} className={\"item\" + index}>\n              <dt>\n                <i className=\"icon sprite_icon2\"></i>\n                <span>{item.name}</span>\n              </dt>\n              <dd>\n                {item.subs.map((value) => {\n                  return (\n                    <div className=\"item\" key={value.name}>\n                      <span\n                        className=\"link\"\n                        onClick={(e) => selectCategory(value.name)}\n                      >\n                        {value.name}\n                      </span>\n                      <span className=\"divider\">|</span>\n                    </div>\n                  );\n                })}\n              </dd>\n            </dl>\n          );\n        })}\n      </div>\n    </SongsCategoryWrapper>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}