{"ast":null,"code":"import * as actionTypes from \"./constants\";\nimport { getSongDetail } from \"@/services/player\";\n\nconst changeCurrentSongAction = res => ({\n  type: actionTypes.CHANGE_CURRENT_SONG,\n  currentSong: res.songs[0]\n});\n\nconst changePlayListAction = playList => ({\n  type: actionTypes.CHANGE_PLAY_LIST,\n  playList\n});\n\nconst changeCurrentSongIndexAction = index => ({\n  type: actionTypes.CHANGE_CURRENT_SONG_INDEX,\n  index\n});\n\nexport const getSongDetailAction = idx => {\n  return (dispatch, getState) => {\n    // 1.根据ids查找playList中是否已经有该歌曲\n    const playList = getState().getIn([\"player\", \"playList\"]);\n    const songIndex = playList.findIndex(item => item.id === idx); // 如果返回的是大于0的下标，则表明找到了。\n\n    if (songIndex !== -1) {\n      dispatch(changeCurrentSongIndexAction(songIndex));\n      const songIds = playList[songIndex];\n      dispatch(changeCurrentSongAction(songIds));\n    } else {\n      // 如果返回的是-1，则表明没找到，则请求歌曲\n      getSongDetail(idx).then(res => {\n        // res.songs && 防止 songs 是 undefined\n        const song = res.songs && res.songs[0]; // !song 防止 song 是 undefined，如果是 undefined什么也不做，直接结束执行\n\n        if (!song) return; // 1.将最新请求的歌曲添加到播放列表中\n\n        const newPlayList = [...playList];\n        newPlayList.push(song); // 2.更新redux中的值\n\n        dispatch(changePlayListAction(newPlayList));\n        dispatch(changeCurrentSongIndexAction(newPlayList.length - 1));\n        dispatch(changeCurrentSongAction(song));\n      });\n    } // 列表中有歌曲，直接播放。\n    // 列表中没有歌曲，添加歌曲。\n\n\n    getSongDetail(ids).then(res => {\n      dispatch(changeCurrentSongAction(res));\n    });\n  };\n};","map":{"version":3,"sources":["F:/ReactTea/moxy-music-react/src/pages/player/store/actionCreators.js"],"names":["actionTypes","getSongDetail","changeCurrentSongAction","res","type","CHANGE_CURRENT_SONG","currentSong","songs","changePlayListAction","playList","CHANGE_PLAY_LIST","changeCurrentSongIndexAction","index","CHANGE_CURRENT_SONG_INDEX","getSongDetailAction","idx","dispatch","getState","getIn","songIndex","findIndex","item","id","songIds","then","song","newPlayList","push","length","ids"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,aAA7B;AAEA,SAASC,aAAT,QAA8B,mBAA9B;;AAEA,MAAMC,uBAAuB,GAAIC,GAAD,KAAU;AACxCC,EAAAA,IAAI,EAAEJ,WAAW,CAACK,mBADsB;AAExCC,EAAAA,WAAW,EAAEH,GAAG,CAACI,KAAJ,CAAU,CAAV;AAF2B,CAAV,CAAhC;;AAKA,MAAMC,oBAAoB,GAAIC,QAAD,KAAe;AAC1CL,EAAAA,IAAI,EAAEJ,WAAW,CAACU,gBADwB;AAE1CD,EAAAA;AAF0C,CAAf,CAA7B;;AAKA,MAAME,4BAA4B,GAAIC,KAAD,KAAY;AAC/CR,EAAAA,IAAI,EAAEJ,WAAW,CAACa,yBAD6B;AAE/CD,EAAAA;AAF+C,CAAZ,CAArC;;AAKA,OAAO,MAAME,mBAAmB,GAAIC,GAAD,IAAS;AAC1C,SAAO,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAC7B;AACA,UAAMR,QAAQ,GAAGQ,QAAQ,GAAGC,KAAX,CAAiB,CAAC,QAAD,EAAW,UAAX,CAAjB,CAAjB;AACA,UAAMC,SAAS,GAAGV,QAAQ,CAACW,SAAT,CAAoBC,IAAD,IAAUA,IAAI,CAACC,EAAL,KAAYP,GAAzC,CAAlB,CAH6B,CAI7B;;AACA,QAAII,SAAS,KAAK,CAAC,CAAnB,EAAsB;AACpBH,MAAAA,QAAQ,CAACL,4BAA4B,CAACQ,SAAD,CAA7B,CAAR;AACA,YAAMI,OAAO,GAAGd,QAAQ,CAACU,SAAD,CAAxB;AACAH,MAAAA,QAAQ,CAACd,uBAAuB,CAACqB,OAAD,CAAxB,CAAR;AACD,KAJD,MAIO;AACL;AACAtB,MAAAA,aAAa,CAACc,GAAD,CAAb,CAAmBS,IAAnB,CAAyBrB,GAAD,IAAS;AAC/B;AACA,cAAMsB,IAAI,GAAGtB,GAAG,CAACI,KAAJ,IAAaJ,GAAG,CAACI,KAAJ,CAAU,CAAV,CAA1B,CAF+B,CAG/B;;AACA,YAAI,CAACkB,IAAL,EAAW,OAJoB,CAK/B;;AACA,cAAMC,WAAW,GAAG,CAAC,GAAGjB,QAAJ,CAApB;AACAiB,QAAAA,WAAW,CAACC,IAAZ,CAAiBF,IAAjB,EAP+B,CAS/B;;AACAT,QAAAA,QAAQ,CAACR,oBAAoB,CAACkB,WAAD,CAArB,CAAR;AACAV,QAAAA,QAAQ,CAACL,4BAA4B,CAACe,WAAW,CAACE,MAAZ,GAAqB,CAAtB,CAA7B,CAAR;AACAZ,QAAAA,QAAQ,CAACd,uBAAuB,CAACuB,IAAD,CAAxB,CAAR;AACD,OAbD;AAcD,KAzB4B,CA2B7B;AACA;;;AAEAxB,IAAAA,aAAa,CAAC4B,GAAD,CAAb,CAAmBL,IAAnB,CAAyBrB,GAAD,IAAS;AAC/Ba,MAAAA,QAAQ,CAACd,uBAAuB,CAACC,GAAD,CAAxB,CAAR;AACD,KAFD;AAGD,GAjCD;AAkCD,CAnCM","sourcesContent":["import * as actionTypes from \"./constants\";\r\n\r\nimport { getSongDetail } from \"@/services/player\";\r\n\r\nconst changeCurrentSongAction = (res) => ({\r\n  type: actionTypes.CHANGE_CURRENT_SONG,\r\n  currentSong: res.songs[0],\r\n});\r\n\r\nconst changePlayListAction = (playList) => ({\r\n  type: actionTypes.CHANGE_PLAY_LIST,\r\n  playList,\r\n});\r\n\r\nconst changeCurrentSongIndexAction = (index) => ({\r\n  type: actionTypes.CHANGE_CURRENT_SONG_INDEX,\r\n  index,\r\n});\r\n\r\nexport const getSongDetailAction = (idx) => {\r\n  return (dispatch, getState) => {\r\n    // 1.根据ids查找playList中是否已经有该歌曲\r\n    const playList = getState().getIn([\"player\", \"playList\"]);\r\n    const songIndex = playList.findIndex((item) => item.id === idx);\r\n    // 如果返回的是大于0的下标，则表明找到了。\r\n    if (songIndex !== -1) {\r\n      dispatch(changeCurrentSongIndexAction(songIndex));\r\n      const songIds = playList[songIndex];\r\n      dispatch(changeCurrentSongAction(songIds));\r\n    } else {\r\n      // 如果返回的是-1，则表明没找到，则请求歌曲\r\n      getSongDetail(idx).then((res) => {\r\n        // res.songs && 防止 songs 是 undefined\r\n        const song = res.songs && res.songs[0];\r\n        // !song 防止 song 是 undefined，如果是 undefined什么也不做，直接结束执行\r\n        if (!song) return;\r\n        // 1.将最新请求的歌曲添加到播放列表中\r\n        const newPlayList = [...playList];\r\n        newPlayList.push(song);\r\n\r\n        // 2.更新redux中的值\r\n        dispatch(changePlayListAction(newPlayList));\r\n        dispatch(changeCurrentSongIndexAction(newPlayList.length - 1));\r\n        dispatch(changeCurrentSongAction(song));\r\n      });\r\n    }\r\n\r\n    // 列表中有歌曲，直接播放。\r\n    // 列表中没有歌曲，添加歌曲。\r\n\r\n    getSongDetail(ids).then((res) => {\r\n      dispatch(changeCurrentSongAction(res));\r\n    });\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}