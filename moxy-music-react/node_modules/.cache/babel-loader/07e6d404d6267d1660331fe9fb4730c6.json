{"ast":null,"code":"import * as actionTypes from \"./constants\";\nimport { getSongDetail, getLyric, getSimiPlaylist, getSimiSong } from \"@/services/player\";\nimport { getRandomNumber } from \"@/utils/math-utils\";\nimport { parseLyric } from \"@/utils/parse-lyric\"; // 不对外暴露的区域\n\nconst changeCurrentSongAction = res => ({\n  type: actionTypes.CHANGE_CURRENT_SONG,\n  currentSong: res\n});\n\nconst changePlayListAction = playList => ({\n  type: actionTypes.CHANGE_PLAY_LIST,\n  playList\n});\n\nconst changeCurrentSongIndexAction = index => ({\n  type: actionTypes.CHANGE_CURRENT_SONG_INDEX,\n  index\n}); // 把歌词添加到 store 中\n\n\nconst changelyricListAction = lyricList => ({\n  type: actionTypes.CHANGE_LYRIC_LIST,\n  lyricList\n}); // 网络请求：相似推荐\n\n\nconst changeSimiPlaylistAction = res => ({\n  type: actionTypes.CHANGE_SIMI_PLAYLIST,\n  simiPlaylist: res.playlists\n});\n\nconst changeSimiSongsAction = res => ({\n  type: actionTypes.CHANGE_SIMI_SONGS,\n  simiSongs: res.songs\n}); // 对外暴露的区域\n\n\nexport const changeSequenceAction = sequence => ({\n  type: actionTypes.CHANGE_SEQUENCE,\n  sequence\n}); // 上一首，下一首 的切换，采用异步action方式\n\nexport const changeSongPlayerAction = tag => {\n  return (dispatch, getState) => {\n    const playList = getState().getIn([\"player\", \"playList\"]);\n    const sequence = getState().getIn([\"player\", \"sequence\"]);\n    let currentSongIndex = getState().getIn([\"player\", \"currentSongIndex\"]);\n\n    switch (sequence) {\n      case 1:\n        // 随机播放\n        let randomIndex = getRandomNumber(playList.length);\n\n        while (randomIndex === currentSongIndex) {\n          randomIndex = getRandomNumber(playList.length);\n        }\n\n        currentSongIndex = randomIndex;\n        break;\n\n      default:\n        // 其他播放\n        currentSongIndex += tag;\n        if (currentSongIndex >= playList.length) currentSongIndex = 0;\n        if (currentSongIndex < 0) currentSongIndex = playList.length - 1;\n        break;\n    }\n\n    const currentSong = playList[currentSongIndex];\n    dispatch(changeCurrentSongAction(currentSong));\n    dispatch(changeCurrentSongIndexAction(currentSongIndex)); // 请求该歌曲的歌词\n\n    dispatch(getLyricAction(currentSong.id));\n  };\n}; // 添加歌曲/第一次打开页面时，获取歌曲信息\n\nexport const getSongDetailAction = idx => {\n  return (dispatch, getState) => {\n    // 1.根据ids查找playList中是否已经有该歌曲\n    const playList = getState().getIn([\"player\", \"playList\"]);\n    const songIndex = playList.findIndex(item => item.id === idx); // 2.判断是否找到歌曲\n    // 如果返回的是大于0的下标，则表明找到了。\n\n    if (songIndex !== -1) {\n      dispatch(changeCurrentSongIndexAction(songIndex));\n      const song = playList[songIndex];\n      console.log(song);\n      dispatch(changeCurrentSongAction(song)); // 3 请求该歌曲的歌词\n\n      dispatch(getLyricAction(song.id));\n    } else {\n      // 如果返回的是-1，则表明没找到，则请求歌曲\n      getSongDetail(idx).then(res => {\n        // res.songs && 防止 songs 是 undefined\n        const song = res.songs && res.songs[0]; // !song 防止 song 是 undefined，如果是 undefined什么也不做，直接结束执行\n\n        if (!song) return; // 1.将最新请求的歌曲添加到播放列表中\n\n        const newPlayList = [...playList];\n        newPlayList.push(song); // 2.更新redux中的值\n\n        dispatch(changePlayListAction(newPlayList));\n        dispatch(changeCurrentSongIndexAction(newPlayList.length - 1));\n        dispatch(changeCurrentSongAction(song)); // 3 请求该歌曲的歌词\n\n        dispatch(getLyricAction(song.id));\n      });\n    }\n  };\n}; // 对应 id 的获取歌词\n\nexport const getLyricAction = id => {\n  return dispatch => {\n    getLyric(id).then(res => {\n      const lyric = res.lrc.lyric;\n      const lyricList = parseLyric(lyric);\n      dispatch(changelyricListAction(lyricList));\n    });\n  };\n}; // 记录当前歌词的下标\n\nexport const changeCurrentLyricIndexAction = currentLyricIndex => ({\n  type: actionTypes.CHANGE_CURRENT_LYRIC_INDEX,\n  currentLyricIndex\n}); // 控制音量\n\nexport const changePlayerVolumeAction = volume => ({\n  type: actionTypes.CHANGE_PLAYER_VOLUME,\n  volume\n}); // 播放页面的相似推荐\n\nexport const getSimiPlaylistAction = () => {\n  return (dispatch, getState) => {\n    const id = getState().getIn([\"player\", \"currentSong\"]).id;\n    if (!id) return;\n    getSimiPlaylist(id).then(res => {\n      dispatch(changeSimiPlaylistAction(res));\n    });\n  };\n};\nexport const getSimiSongAction = () => {\n  return (dispatch, getState) => {\n    const id = getState().getIn([\"player\", \"currentSong\"]).id;\n    if (!id) return;\n    getSimiSong(id).then(res => {\n      dispatch(changeSimiSongsAction(res));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/moxy/ReactTea/moxy-music-react/src/pages/player/store/actionCreators.js"],"names":["actionTypes","getSongDetail","getLyric","getSimiPlaylist","getSimiSong","getRandomNumber","parseLyric","changeCurrentSongAction","res","type","CHANGE_CURRENT_SONG","currentSong","changePlayListAction","playList","CHANGE_PLAY_LIST","changeCurrentSongIndexAction","index","CHANGE_CURRENT_SONG_INDEX","changelyricListAction","lyricList","CHANGE_LYRIC_LIST","changeSimiPlaylistAction","CHANGE_SIMI_PLAYLIST","simiPlaylist","playlists","changeSimiSongsAction","CHANGE_SIMI_SONGS","simiSongs","songs","changeSequenceAction","sequence","CHANGE_SEQUENCE","changeSongPlayerAction","tag","dispatch","getState","getIn","currentSongIndex","randomIndex","length","getLyricAction","id","getSongDetailAction","idx","songIndex","findIndex","item","song","console","log","then","newPlayList","push","lyric","lrc","changeCurrentLyricIndexAction","currentLyricIndex","CHANGE_CURRENT_LYRIC_INDEX","changePlayerVolumeAction","volume","CHANGE_PLAYER_VOLUME","getSimiPlaylistAction","getSimiSongAction"],"mappings":"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","sourcesContent":["import * as actionTypes from \"./constants\";\n\nimport {\n  getSongDetail,\n  getLyric,\n  getSimiPlaylist,\n  getSimiSong,\n} from \"@/services/player\";\nimport { getRandomNumber } from \"@/utils/math-utils\";\nimport { parseLyric } from \"@/utils/parse-lyric\";\n\n// 不对外暴露的区域\nconst changeCurrentSongAction = (res) => ({\n  type: actionTypes.CHANGE_CURRENT_SONG,\n  currentSong: res,\n});\n\nconst changePlayListAction = (playList) => ({\n  type: actionTypes.CHANGE_PLAY_LIST,\n  playList,\n});\n\nconst changeCurrentSongIndexAction = (index) => ({\n  type: actionTypes.CHANGE_CURRENT_SONG_INDEX,\n  index,\n});\n\n// 把歌词添加到 store 中\nconst changelyricListAction = (lyricList) => ({\n  type: actionTypes.CHANGE_LYRIC_LIST,\n  lyricList,\n});\n\n// 网络请求：相似推荐\nconst changeSimiPlaylistAction = (res) => ({\n  type: actionTypes.CHANGE_SIMI_PLAYLIST,\n  simiPlaylist: res.playlists,\n});\n\nconst changeSimiSongsAction = (res) => ({\n  type: actionTypes.CHANGE_SIMI_SONGS,\n  simiSongs: res.songs,\n});\n\n// 对外暴露的区域\nexport const changeSequenceAction = (sequence) => ({\n  type: actionTypes.CHANGE_SEQUENCE,\n  sequence,\n});\n\n// 上一首，下一首 的切换，采用异步action方式\nexport const changeSongPlayerAction = (tag) => {\n  return (dispatch, getState) => {\n    const playList = getState().getIn([\"player\", \"playList\"]);\n    const sequence = getState().getIn([\"player\", \"sequence\"]);\n    let currentSongIndex = getState().getIn([\"player\", \"currentSongIndex\"]);\n    switch (sequence) {\n      case 1: // 随机播放\n        let randomIndex = getRandomNumber(playList.length);\n        while (randomIndex === currentSongIndex) {\n          randomIndex = getRandomNumber(playList.length);\n        }\n        currentSongIndex = randomIndex;\n        break;\n      default:\n        // 其他播放\n        currentSongIndex += tag;\n        if (currentSongIndex >= playList.length) currentSongIndex = 0;\n        if (currentSongIndex < 0) currentSongIndex = playList.length - 1;\n        break;\n    }\n    const currentSong = playList[currentSongIndex];\n    dispatch(changeCurrentSongAction(currentSong));\n    dispatch(changeCurrentSongIndexAction(currentSongIndex));\n\n    // 请求该歌曲的歌词\n    dispatch(getLyricAction(currentSong.id));\n  };\n};\n\n// 添加歌曲/第一次打开页面时，获取歌曲信息\nexport const getSongDetailAction = (idx) => {\n  return (dispatch, getState) => {\n    // 1.根据ids查找playList中是否已经有该歌曲\n    const playList = getState().getIn([\"player\", \"playList\"]);\n    const songIndex = playList.findIndex((item) => item.id === idx);\n\n    // 2.判断是否找到歌曲\n    // 如果返回的是大于0的下标，则表明找到了。\n    if (songIndex !== -1) {\n      dispatch(changeCurrentSongIndexAction(songIndex));\n      const song = playList[songIndex];\n      console.log(song);\n      dispatch(changeCurrentSongAction(song));\n\n      // 3 请求该歌曲的歌词\n      dispatch(getLyricAction(song.id));\n    } else {\n      // 如果返回的是-1，则表明没找到，则请求歌曲\n      getSongDetail(idx).then((res) => {\n        // res.songs && 防止 songs 是 undefined\n        const song = res.songs && res.songs[0];\n        // !song 防止 song 是 undefined，如果是 undefined什么也不做，直接结束执行\n        if (!song) return;\n        // 1.将最新请求的歌曲添加到播放列表中\n        const newPlayList = [...playList];\n        newPlayList.push(song);\n\n        // 2.更新redux中的值\n        dispatch(changePlayListAction(newPlayList));\n        dispatch(changeCurrentSongIndexAction(newPlayList.length - 1));\n        dispatch(changeCurrentSongAction(song));\n\n        // 3 请求该歌曲的歌词\n        dispatch(getLyricAction(song.id));\n      });\n    }\n  };\n};\n\n// 对应 id 的获取歌词\nexport const getLyricAction = (id) => {\n  return (dispatch) => {\n    getLyric(id).then((res) => {\n      const lyric = res.lrc.lyric;\n      const lyricList = parseLyric(lyric);\n      dispatch(changelyricListAction(lyricList));\n    });\n  };\n};\n\n// 记录当前歌词的下标\nexport const changeCurrentLyricIndexAction = (currentLyricIndex) => ({\n  type: actionTypes.CHANGE_CURRENT_LYRIC_INDEX,\n  currentLyricIndex,\n});\n\n// 控制音量\nexport const changePlayerVolumeAction = (volume) => ({\n  type: actionTypes.CHANGE_PLAYER_VOLUME,\n  volume,\n});\n\n// 播放页面的相似推荐\nexport const getSimiPlaylistAction = () => {\n  return (dispatch, getState) => {\n    const id = getState().getIn([\"player\", \"currentSong\"]).id;\n    if (!id) return;\n\n    getSimiPlaylist(id).then((res) => {\n      dispatch(changeSimiPlaylistAction(res));\n    });\n  };\n};\n\nexport const getSimiSongAction = () => {\n  return (dispatch, getState) => {\n    const id = getState().getIn([\"player\", \"currentSong\"]).id;\n    if (!id) return;\n\n    getSimiSong(id).then((res) => {\n      dispatch(changeSimiSongsAction(res));\n    });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}