{"ast":null,"code":"import _slicedToArray from\"F:/ReactTea/moxy-music-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{memo,useState,useEffect,useRef,useCallback}from\"react\";import{useDispatch,useSelector,shallowEqual}from\"react-redux\";import{NavLink}from\"react-router-dom\";import{Slider,message}from\"antd\";import{getSizeImage,formatDate,getPlayUrl}from\"@/utils/format-utils\";import{getSongDetailAction,changeSequenceAction,changeSongPlayerAction,changeCurrentLyricIndexAction}from\"../store/actionCreators\";import{PlaybarWrapper,Control,PlayInfo,Operator}from\"./style\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default/*#__PURE__*/memo(function LJAppPlayBar(){// component state：      组件内部的state\nvar _useState=useState(0),_useState2=_slicedToArray(_useState,2),currentTime=_useState2[0],setCurrentTime=_useState2[1];var _useState3=useState(0),_useState4=_slicedToArray(_useState3,2),progress=_useState4[0],setProgress=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),isChanging=_useState6[0],setIsChanging=_useState6[1];var _useState7=useState(false),_useState8=_slicedToArray(_useState7,2),isPlaying=_useState8[0],setIsPlaying=_useState8[1];// redux hooks：          获取state和dispatch\nvar _useSelector=useSelector(function(state){return{currentSong:state.getIn([\"player\",\"currentSong\"]),sequence:state.getIn([\"player\",\"sequence\"]),lyricList:state.getIn([\"player\",\"lyricList\"]),currentLyricIndex:state.getIn([\"player\",\"currentLyricIndex\"])};},shallowEqual),currentSong=_useSelector.currentSong,sequence=_useSelector.sequence,lyricList=_useSelector.lyricList,currentLyricIndex=_useSelector.currentLyricIndex;var dispatch=useDispatch();var audioRef=useRef();// other hooks：          react的hooks\nuseEffect(function(){dispatch(getSongDetailAction(1858069368));},[dispatch]);useEffect(function(){audioRef.current.src=getPlayUrl(currentSong.id);// 自动播放\naudioRef.current.play().then(function(res){setIsPlaying(true);}).catch(function(err){setIsPlaying(false);});},[currentSong.id]);// other function：       组件内部的其他逻辑\n// 判断如果有值，才会去值，否则为 undefined。防止报，且可以一个默认值，这里就没给了。\nvar picUrl=currentSong.al&&currentSong.al.picUrl||\"\";var songName=currentSong.name||\"未知歌曲\";var singerName=currentSong.ar&&currentSong.ar[0].name||\"未知歌手\";var duration=currentSong.dt||0;var showDuration=formatDate(duration,\"mm:ss\");var showCurrentTime=formatDate(currentTime*1000,\"mm:ss\");//handle function\n// 播放逻辑\nvar playMusic=useCallback(function(){isPlaying?audioRef.current.pause():audioRef.current.play();setIsPlaying(!isPlaying);},[isPlaying]);// 播放条上的当前时间\nvar timeUpdate=function timeUpdate(e){var time=e.target.currentTime;if(!isChanging){setCurrentTime(time);setProgress(currentTime*1000/duration*100);}// 获取当前时间的歌词\nvar i=0;for(;i<lyricList.length;i++){var lyricItem=lyricList[i];// console.log(Ntime, \"@\", lyricItem.time, \"%\");\nif(time*1000<lyricItem.time){break;}}// console.log(lyricList[i - 1]);\nif(currentLyricIndex!==i-1){dispatch(changeCurrentLyricIndexAction(i-1));// 防止 i-1 为 -1， 取不到值而报错\nvar content=lyricList[i-1]&&lyricList[i-1].content;message.open({key:\"lyric\",content:content,duration:0});}};// Slider是一个组定义组件，要往里面传递参数的时候，使用useCallback嵌套回调函数的时候，防止频繁重新定义\n// 按下\nvar sliderChange=useCallback(function(value){var time=value/100*duration/1000;setProgress(value);setCurrentTime(time);setIsChanging(true);},[duration]);// 松开\nvar sliderAfterChange=useCallback(function(value){var time=value/100*duration/1000;audioRef.current.currentTime=time;setCurrentTime(time);setIsChanging(false);if(!isPlaying)playMusic();},[duration,isPlaying,playMusic]);// 控制循环单曲随机播放\nvar changeSequence=function changeSequence(){var currentSequence=sequence===2?0:sequence+1;dispatch(changeSequenceAction(currentSequence));};// 控制上一首，下一首切换\nvar changeMusic=function changeMusic(tag){dispatch(changeSongPlayerAction(tag));};// 控制播放完毕后，自动切换下一首播放\nvar handleMusicEnded=function handleMusicEnded(){if(sequence===2){// 单曲循环\n// 直接把播放时间设置为 0\naudioRef.current.currentTime=0;audioRef.current.play();}else{// 随机/顺序播放\ndispatch(changeSongPlayerAction(1));}};return/*#__PURE__*/_jsx(PlaybarWrapper,{className:\"sprite_playbar\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"content wrap-v2\",children:[/*#__PURE__*/_jsxs(Control,{isPlaying:isPlaying,children:[/*#__PURE__*/_jsx(\"button\",{className:\"sprite_playbar prev\",onClick:function onClick(e){changeMusic(-1);}}),/*#__PURE__*/_jsx(\"button\",{className:\"sprite_playbar play\",onClick:function onClick(e){return playMusic();}}),/*#__PURE__*/_jsx(\"button\",{className:\"sprite_playbar next\",onClick:function onClick(e){changeMusic(1);}})]}),/*#__PURE__*/_jsxs(PlayInfo,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"image\",children:/*#__PURE__*/_jsx(NavLink,{to:\"/player\",children:/*#__PURE__*/_jsx(\"img\",{src:getSizeImage(picUrl,35),alt:\"\\u97F3\\u4E50\"})})}),/*#__PURE__*/_jsxs(\"div\",{className:\"info\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"song\",children:[/*#__PURE__*/_jsx(\"a\",{href:\"/todo\",className:\"song-name\",children:songName}),/*#__PURE__*/_jsx(\"a\",{href:\"/todo\",className:\"singer-name\",children:singerName})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"progress\",children:[/*#__PURE__*/_jsx(Slider,{tipFormatter:null,value:progress,onChange:sliderChange,onAfterChange:sliderAfterChange}),/*#__PURE__*/_jsxs(\"div\",{className:\"time\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"now-time\",children:showCurrentTime}),/*#__PURE__*/_jsx(\"span\",{className:\"divider\",children:\"/\"}),/*#__PURE__*/_jsx(\"span\",{className:\"duration\",children:showDuration})]})]})]})]}),/*#__PURE__*/_jsxs(Operator,{sequence:sequence,children:[/*#__PURE__*/_jsxs(\"div\",{className:\"left\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"playerbar_pip btn pip\"}),/*#__PURE__*/_jsx(\"button\",{className:\"sprite_playbar btn favor\"}),/*#__PURE__*/_jsx(\"button\",{className:\"sprite_playbar btn share\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"right sprite_playbar\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"sprite_playbar btn volume\"}),/*#__PURE__*/_jsx(\"button\",{className:\"sprite_playbar btn loop\",onClick:function onClick(e){changeSequence();}}),/*#__PURE__*/_jsx(\"button\",{className:\"sprite_playbar btn playlist\"})]})]}),/*#__PURE__*/_jsx(\"audio\",{ref:audioRef,onTimeUpdate:timeUpdate,onEnded:function onEnded(e){handleMusicEnded();}})]})});});","map":{"version":3,"sources":["F:/ReactTea/moxy-music-react/src/pages/player/app-player-bar/index.js"],"names":["React","memo","useState","useEffect","useRef","useCallback","useDispatch","useSelector","shallowEqual","NavLink","Slider","message","getSizeImage","formatDate","getPlayUrl","getSongDetailAction","changeSequenceAction","changeSongPlayerAction","changeCurrentLyricIndexAction","PlaybarWrapper","Control","PlayInfo","Operator","LJAppPlayBar","currentTime","setCurrentTime","progress","setProgress","isChanging","setIsChanging","isPlaying","setIsPlaying","state","currentSong","getIn","sequence","lyricList","currentLyricIndex","dispatch","audioRef","current","src","id","play","then","res","catch","err","picUrl","al","songName","name","singerName","ar","duration","dt","showDuration","showCurrentTime","playMusic","pause","timeUpdate","e","time","target","i","length","lyricItem","content","open","key","sliderChange","value","sliderAfterChange","changeSequence","currentSequence","changeMusic","tag","handleMusicEnded"],"mappings":"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","sourcesContent":["import React, { memo, useState, useEffect, useRef, useCallback } from \"react\";\r\nimport { useDispatch, useSelector, shallowEqual } from \"react-redux\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { Slider, message } from \"antd\";\r\n\r\nimport { getSizeImage, formatDate, getPlayUrl } from \"@/utils/format-utils\";\r\nimport {\r\n  getSongDetailAction,\r\n  changeSequenceAction,\r\n  changeSongPlayerAction,\r\n  changeCurrentLyricIndexAction,\r\n} from \"../store/actionCreators\";\r\n\r\nimport { PlaybarWrapper, Control, PlayInfo, Operator } from \"./style\";\r\n\r\nexport default memo(function LJAppPlayBar() {\r\n  // component state：      组件内部的state\r\n  const [currentTime, setCurrentTime] = useState(0);\r\n  const [progress, setProgress] = useState(0);\r\n  const [isChanging, setIsChanging] = useState(false);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n\r\n  // redux hooks：          获取state和dispatch\r\n  const { currentSong, sequence, lyricList, currentLyricIndex } = useSelector(\r\n    (state) => ({\r\n      currentSong: state.getIn([\"player\", \"currentSong\"]),\r\n      sequence: state.getIn([\"player\", \"sequence\"]),\r\n      lyricList: state.getIn([\"player\", \"lyricList\"]),\r\n      currentLyricIndex: state.getIn([\"player\", \"currentLyricIndex\"]),\r\n    }),\r\n    shallowEqual\r\n  );\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const audioRef = useRef();\r\n\r\n  // other hooks：          react的hooks\r\n  useEffect(() => {\r\n    dispatch(getSongDetailAction(1858069368));\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    audioRef.current.src = getPlayUrl(currentSong.id);\r\n    // 自动播放\r\n    audioRef.current\r\n      .play()\r\n      .then((res) => {\r\n        setIsPlaying(true);\r\n      })\r\n      .catch((err) => {\r\n        setIsPlaying(false);\r\n      });\r\n  }, [currentSong.id]);\r\n\r\n  // other function：       组件内部的其他逻辑\r\n  // 判断如果有值，才会去值，否则为 undefined。防止报，且可以一个默认值，这里就没给了。\r\n  const picUrl = (currentSong.al && currentSong.al.picUrl) || \"\";\r\n  const songName = currentSong.name || \"未知歌曲\";\r\n  const singerName = (currentSong.ar && currentSong.ar[0].name) || \"未知歌手\";\r\n  const duration = currentSong.dt || 0;\r\n  const showDuration = formatDate(duration, \"mm:ss\");\r\n  const showCurrentTime = formatDate(currentTime * 1000, \"mm:ss\");\r\n\r\n  //handle function\r\n  // 播放逻辑\r\n  const playMusic = useCallback(() => {\r\n    isPlaying ? audioRef.current.pause() : audioRef.current.play();\r\n    setIsPlaying(!isPlaying);\r\n  }, [isPlaying]);\r\n\r\n  // 播放条上的当前时间\r\n  const timeUpdate = (e) => {\r\n    const time = e.target.currentTime;\r\n    if (!isChanging) {\r\n      setCurrentTime(time);\r\n      setProgress(((currentTime * 1000) / duration) * 100);\r\n    }\r\n\r\n    // 获取当前时间的歌词\r\n    let i = 0;\r\n    for (; i < lyricList.length; i++) {\r\n      let lyricItem = lyricList[i];\r\n      // console.log(Ntime, \"@\", lyricItem.time, \"%\");\r\n      if (time * 1000 < lyricItem.time) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    // console.log(lyricList[i - 1]);\r\n    if (currentLyricIndex !== i - 1) {\r\n      dispatch(changeCurrentLyricIndexAction(i - 1));\r\n      // 防止 i-1 为 -1， 取不到值而报错\r\n      const content = lyricList[i - 1] && lyricList[i - 1].content;\r\n      message.open({\r\n        key: \"lyric\",\r\n        content,\r\n        duration: 0,\r\n      });\r\n    }\r\n  };\r\n\r\n  // Slider是一个组定义组件，要往里面传递参数的时候，使用useCallback嵌套回调函数的时候，防止频繁重新定义\r\n  // 按下\r\n  const sliderChange = useCallback(\r\n    (value) => {\r\n      const time = ((value / 100) * duration) / 1000;\r\n      setProgress(value);\r\n      setCurrentTime(time);\r\n      setIsChanging(true);\r\n    },\r\n    [duration]\r\n  );\r\n  // 松开\r\n  const sliderAfterChange = useCallback(\r\n    (value) => {\r\n      const time = ((value / 100) * duration) / 1000;\r\n      audioRef.current.currentTime = time;\r\n      setCurrentTime(time);\r\n      setIsChanging(false);\r\n      if (!isPlaying) playMusic();\r\n    },\r\n    [duration, isPlaying, playMusic]\r\n  );\r\n\r\n  // 控制循环单曲随机播放\r\n  const changeSequence = () => {\r\n    const currentSequence = sequence === 2 ? 0 : sequence + 1;\r\n    dispatch(changeSequenceAction(currentSequence));\r\n  };\r\n\r\n  // 控制上一首，下一首切换\r\n  const changeMusic = (tag) => {\r\n    dispatch(changeSongPlayerAction(tag));\r\n  };\r\n\r\n  // 控制播放完毕后，自动切换下一首播放\r\n  const handleMusicEnded = () => {\r\n    if (sequence === 2) {\r\n      // 单曲循环\r\n      // 直接把播放时间设置为 0\r\n      audioRef.current.currentTime = 0;\r\n      audioRef.current.play();\r\n    } else {\r\n      // 随机/顺序播放\r\n      dispatch(changeSongPlayerAction(1));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <PlaybarWrapper className=\"sprite_playbar\">\r\n      <div className=\"content wrap-v2\">\r\n        <Control isPlaying={isPlaying}>\r\n          <button\r\n            className=\"sprite_playbar prev\"\r\n            onClick={(e) => {\r\n              changeMusic(-1);\r\n            }}\r\n          ></button>\r\n          <button\r\n            className=\"sprite_playbar play\"\r\n            onClick={(e) => playMusic()}\r\n          ></button>\r\n          <button\r\n            className=\"sprite_playbar next\"\r\n            onClick={(e) => {\r\n              changeMusic(1);\r\n            }}\r\n          ></button>\r\n        </Control>\r\n        <PlayInfo>\r\n          <div className=\"image\">\r\n            <NavLink to=\"/player\">\r\n              <img src={getSizeImage(picUrl, 35)} alt=\"音乐\" />\r\n            </NavLink>\r\n          </div>\r\n          <div className=\"info\">\r\n            <div className=\"song\">\r\n              <a href=\"/todo\" className=\"song-name\">\r\n                {songName}\r\n              </a>\r\n              <a href=\"/todo\" className=\"singer-name\">\r\n                {singerName}\r\n              </a>\r\n            </div>\r\n            <div className=\"progress\">\r\n              <Slider\r\n                tipFormatter={null}\r\n                value={progress}\r\n                onChange={sliderChange}\r\n                onAfterChange={sliderAfterChange}\r\n              />\r\n              <div className=\"time\">\r\n                <span className=\"now-time\">{showCurrentTime}</span>\r\n                <span className=\"divider\">/</span>\r\n                <span className=\"duration\">{showDuration}</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </PlayInfo>\r\n        <Operator sequence={sequence}>\r\n          <div className=\"left\">\r\n            <button className=\"playerbar_pip btn pip\"></button>\r\n            <button className=\"sprite_playbar btn favor\"></button>\r\n            <button className=\"sprite_playbar btn share\"></button>\r\n          </div>\r\n          <div className=\"right sprite_playbar\">\r\n            <button className=\"sprite_playbar btn volume\"></button>\r\n            <button\r\n              className=\"sprite_playbar btn loop\"\r\n              onClick={(e) => {\r\n                changeSequence();\r\n              }}\r\n            ></button>\r\n            <button className=\"sprite_playbar btn playlist\"></button>\r\n          </div>\r\n        </Operator>\r\n        <audio\r\n          ref={audioRef}\r\n          onTimeUpdate={timeUpdate}\r\n          onEnded={(e) => {\r\n            handleMusicEnded();\r\n          }}\r\n        />\r\n      </div>\r\n    </PlaybarWrapper>\r\n  );\r\n});\r\n"]},"metadata":{},"sourceType":"module"}