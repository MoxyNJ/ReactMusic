{"ast":null,"code":"import _createForOfIteratorHelper from\"/Users/moxy/ReactTea/moxy-music-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import _slicedToArray from\"/Users/moxy/ReactTea/moxy-music-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";export function handleSongsCategory(data){// 1.获取所有的类别\nvar category=data.categories;// category： {0: '语种', 1: '风格', 2: '场景', 3: '情感', 4: '主题'}\n// 2.创建类别数据结构\n//   2.1 entries 把category 对象转换为了可迭代的数组，成员是对象的 key / value 对\n//     (5) [Array(2), Array(2), Array(2), Array(2), Array(2)]\n//       0: (2) ['0', '语种']\n//       1: (2) ['1', '风格']\n//       2: (2) ['2', '场景']\n//       3: (2) ['3', '情感']\n//       4: (2) ['4', '主题']\n//   2.2 利用 map 对数组进行改造，参数利用了解构赋值，提取出 key 和 value\nvar categoryData=Object.entries(category).map(function(_ref){var _ref2=_slicedToArray(_ref,2),key=_ref2[0],value=_ref2[1];return{name:value,subs:[]};});// categoryData\n// (5) [{…}, {…}, {…}, {…}, {…}]\n//   0: {name: '语种', subs: Array(5)}\n//   1: {name: '风格', subs: Array(21)}\n//   2: {name: '场景', subs: Array(12)}\n//   3: {name: '情感', subs: Array(12)}\n//   4: {name: '主题', subs: Array(18)}\n//   length: 5\n// 3.将subs添加到对应的类别中\nvar _iterator=_createForOfIteratorHelper(data.sub),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var item=_step.value;categoryData[item.category].subs.push(item);}}catch(err){_iterator.e(err);}finally{_iterator.f();}return categoryData;}// 获取歌手字母类别\n// return:  28) ['-1', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '0']\n// 开头的 -1 代表全部，结尾的 0 代表其他。\nexport function generateSingerAlpha(){var alphabets=[\"-1\"];var start=\"A\".charCodeAt(0);var last=\"Z\".charCodeAt(0);for(var i=start;i<=last;++i){alphabets.push(String.fromCharCode(i));}alphabets.push(\"0\");return alphabets;}export var singerAlphas=generateSingerAlpha();","map":{"version":3,"sources":["/Users/moxy/ReactTea/moxy-music-react/src/utils/handle-data.js"],"names":["handleSongsCategory","data","category","categories","categoryData","Object","entries","map","key","value","name","subs","sub","item","push","generateSingerAlpha","alphabets","start","charCodeAt","last","i","String","fromCharCode","singerAlphas"],"mappings":"gVAAA,MAAO,SAASA,CAAAA,mBAAT,CAA6BC,IAA7B,CAAmC,CACxC;AACA,GAAMC,CAAAA,QAAQ,CAAGD,IAAI,CAACE,UAAtB,CACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAMC,CAAAA,YAAY,CAAGC,MAAM,CAACC,OAAP,CAAeJ,QAAf,EAAyBK,GAAzB,CAA6B,cAAkB,kCAAhBC,GAAgB,UAAXC,KAAW,UAClE,MAAO,CACLC,IAAI,CAAED,KADD,CAELE,IAAI,CAAE,EAFD,CAAP,CAID,CALoB,CAArB,CAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AA7BwC,yCA8BvBV,IAAI,CAACW,GA9BkB,YA8BxC,+CAA2B,IAAlBC,CAAAA,IAAkB,aACzBT,YAAY,CAACS,IAAI,CAACX,QAAN,CAAZ,CAA4BS,IAA5B,CAAiCG,IAAjC,CAAsCD,IAAtC,EACD,CAhCuC,qDAkCxC,MAAOT,CAAAA,YAAP,CACD,CAED;AACA;AACA;AACA,MAAO,SAASW,CAAAA,mBAAT,EAA+B,CACpC,GAAIC,CAAAA,SAAS,CAAG,CAAC,IAAD,CAAhB,CACA,GAAIC,CAAAA,KAAK,CAAG,IAAIC,UAAJ,CAAe,CAAf,CAAZ,CACA,GAAIC,CAAAA,IAAI,CAAG,IAAID,UAAJ,CAAe,CAAf,CAAX,CACA,IAAK,GAAIE,CAAAA,CAAC,CAAGH,KAAb,CAAoBG,CAAC,EAAID,IAAzB,CAA+B,EAAEC,CAAjC,CAAoC,CAClCJ,SAAS,CAACF,IAAV,CAAeO,MAAM,CAACC,YAAP,CAAoBF,CAApB,CAAf,EACD,CAEDJ,SAAS,CAACF,IAAV,CAAe,GAAf,EACA,MAAOE,CAAAA,SAAP,CACD,CAED,MAAO,IAAMO,CAAAA,YAAY,CAAGR,mBAAmB,EAAxC","sourcesContent":["export function handleSongsCategory(data) {\n  // 1.获取所有的类别\n  const category = data.categories;\n  // category： {0: '语种', 1: '风格', 2: '场景', 3: '情感', 4: '主题'}\n\n  // 2.创建类别数据结构\n  //   2.1 entries 把category 对象转换为了可迭代的数组，成员是对象的 key / value 对\n  //     (5) [Array(2), Array(2), Array(2), Array(2), Array(2)]\n  //       0: (2) ['0', '语种']\n  //       1: (2) ['1', '风格']\n  //       2: (2) ['2', '场景']\n  //       3: (2) ['3', '情感']\n  //       4: (2) ['4', '主题']\n  //   2.2 利用 map 对数组进行改造，参数利用了解构赋值，提取出 key 和 value\n  const categoryData = Object.entries(category).map(([key, value]) => {\n    return {\n      name: value,\n      subs: [],\n    };\n  });\n  // categoryData\n  // (5) [{…}, {…}, {…}, {…}, {…}]\n  //   0: {name: '语种', subs: Array(5)}\n  //   1: {name: '风格', subs: Array(21)}\n  //   2: {name: '场景', subs: Array(12)}\n  //   3: {name: '情感', subs: Array(12)}\n  //   4: {name: '主题', subs: Array(18)}\n  //   length: 5\n\n  // 3.将subs添加到对应的类别中\n  for (let item of data.sub) {\n    categoryData[item.category].subs.push(item);\n  }\n\n  return categoryData;\n}\n\n// 获取歌手字母类别\n// return:  28) ['-1', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '0']\n// 开头的 -1 代表全部，结尾的 0 代表其他。\nexport function generateSingerAlpha() {\n  var alphabets = [\"-1\"];\n  var start = \"A\".charCodeAt(0);\n  var last = \"Z\".charCodeAt(0);\n  for (var i = start; i <= last; ++i) {\n    alphabets.push(String.fromCharCode(i));\n  }\n\n  alphabets.push(\"0\");\n  return alphabets;\n}\n\nexport const singerAlphas = generateSingerAlpha();\n"]},"metadata":{},"sourceType":"module"}