{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _fakeTimers() {\n  const data = require('@sinonjs/fake-timers');\n\n  _fakeTimers = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestMessageUtil() {\n  const data = require('jest-message-util');\n\n  _jestMessageUtil = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nclass FakeTimers {\n  constructor({\n    global,\n    config,\n    maxLoops\n  }) {\n    _defineProperty(this, '_clock', void 0);\n\n    _defineProperty(this, '_config', void 0);\n\n    _defineProperty(this, '_fakingTime', void 0);\n\n    _defineProperty(this, '_global', void 0);\n\n    _defineProperty(this, '_fakeTimers', void 0);\n\n    _defineProperty(this, '_maxLoops', void 0);\n\n    this._global = global;\n    this._config = config;\n    this._maxLoops = maxLoops || 100000;\n    this._fakingTime = false;\n    this._fakeTimers = (0, _fakeTimers().withGlobal)(global);\n  }\n\n  clearAllTimers() {\n    if (this._fakingTime) {\n      this._clock.reset();\n    }\n  }\n\n  dispose() {\n    this.useRealTimers();\n  }\n\n  runAllTimers() {\n    if (this._checkFakeTimers()) {\n      this._clock.runAll();\n    }\n  }\n\n  runOnlyPendingTimers() {\n    if (this._checkFakeTimers()) {\n      this._clock.runToLast();\n    }\n  }\n\n  advanceTimersToNextTimer(steps = 1) {\n    if (this._checkFakeTimers()) {\n      for (let i = steps; i > 0; i--) {\n        this._clock.next(); // Fire all timers at this point: https://github.com/sinonjs/fake-timers/issues/250\n\n\n        this._clock.tick(0);\n\n        if (this._clock.countTimers() === 0) {\n          break;\n        }\n      }\n    }\n  }\n\n  advanceTimersByTime(msToRun) {\n    if (this._checkFakeTimers()) {\n      this._clock.tick(msToRun);\n    }\n  }\n\n  runAllTicks() {\n    if (this._checkFakeTimers()) {\n      // @ts-expect-error\n      this._clock.runMicrotasks();\n    }\n  }\n\n  useRealTimers() {\n    if (this._fakingTime) {\n      this._clock.uninstall();\n\n      this._fakingTime = false;\n    }\n  }\n\n  useFakeTimers() {\n    if (!this._fakingTime) {\n      const toFake = Object.keys(this._fakeTimers.timers);\n      this._clock = this._fakeTimers.install({\n        loopLimit: this._maxLoops,\n        now: Date.now(),\n        target: this._global,\n        toFake\n      });\n      this._fakingTime = true;\n    }\n  }\n\n  reset() {\n    if (this._checkFakeTimers()) {\n      const {\n        now\n      } = this._clock;\n\n      this._clock.reset();\n\n      this._clock.setSystemTime(now);\n    }\n  }\n\n  setSystemTime(now) {\n    if (this._checkFakeTimers()) {\n      this._clock.setSystemTime(now);\n    }\n  }\n\n  getRealSystemTime() {\n    return Date.now();\n  }\n\n  getTimerCount() {\n    if (this._checkFakeTimers()) {\n      return this._clock.countTimers();\n    }\n\n    return 0;\n  }\n\n  _checkFakeTimers() {\n    if (!this._fakingTime) {\n      this._global.console.warn('A function to advance timers was called but the timers API is not ' + 'mocked with fake timers. Call `jest.useFakeTimers()` in this test or ' + 'enable fake timers globally by setting `\"timers\": \"fake\"` in the ' + 'configuration file\\nStack Trace:\\n' + (0, _jestMessageUtil().formatStackTrace)(new Error().stack, this._config, {\n        noStackTrace: false\n      }));\n    }\n\n    return this._fakingTime;\n  }\n\n}\n\nexports.default = FakeTimers;","map":{"version":3,"sources":["F:/GreenTea-Lemon/React/coderwhyReact/我的代码/15_learn_hooks/node_modules/@jest/fake-timers/build/modernFakeTimers.js"],"names":["Object","defineProperty","exports","value","default","_fakeTimers","data","require","_jestMessageUtil","_defineProperty","obj","key","enumerable","configurable","writable","FakeTimers","constructor","global","config","maxLoops","_global","_config","_maxLoops","_fakingTime","withGlobal","clearAllTimers","_clock","reset","dispose","useRealTimers","runAllTimers","_checkFakeTimers","runAll","runOnlyPendingTimers","runToLast","advanceTimersToNextTimer","steps","i","next","tick","countTimers","advanceTimersByTime","msToRun","runAllTicks","runMicrotasks","uninstall","useFakeTimers","toFake","keys","timers","install","loopLimit","now","Date","target","setSystemTime","getRealSystemTime","getTimerCount","console","warn","formatStackTrace","Error","stack","noStackTrace"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _fakeTimers() {\n  const data = require('@sinonjs/fake-timers');\n\n  _fakeTimers = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestMessageUtil() {\n  const data = require('jest-message-util');\n\n  _jestMessageUtil = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\nclass FakeTimers {\n  constructor({global, config, maxLoops}) {\n    _defineProperty(this, '_clock', void 0);\n\n    _defineProperty(this, '_config', void 0);\n\n    _defineProperty(this, '_fakingTime', void 0);\n\n    _defineProperty(this, '_global', void 0);\n\n    _defineProperty(this, '_fakeTimers', void 0);\n\n    _defineProperty(this, '_maxLoops', void 0);\n\n    this._global = global;\n    this._config = config;\n    this._maxLoops = maxLoops || 100000;\n    this._fakingTime = false;\n    this._fakeTimers = (0, _fakeTimers().withGlobal)(global);\n  }\n\n  clearAllTimers() {\n    if (this._fakingTime) {\n      this._clock.reset();\n    }\n  }\n\n  dispose() {\n    this.useRealTimers();\n  }\n\n  runAllTimers() {\n    if (this._checkFakeTimers()) {\n      this._clock.runAll();\n    }\n  }\n\n  runOnlyPendingTimers() {\n    if (this._checkFakeTimers()) {\n      this._clock.runToLast();\n    }\n  }\n\n  advanceTimersToNextTimer(steps = 1) {\n    if (this._checkFakeTimers()) {\n      for (let i = steps; i > 0; i--) {\n        this._clock.next(); // Fire all timers at this point: https://github.com/sinonjs/fake-timers/issues/250\n\n        this._clock.tick(0);\n\n        if (this._clock.countTimers() === 0) {\n          break;\n        }\n      }\n    }\n  }\n\n  advanceTimersByTime(msToRun) {\n    if (this._checkFakeTimers()) {\n      this._clock.tick(msToRun);\n    }\n  }\n\n  runAllTicks() {\n    if (this._checkFakeTimers()) {\n      // @ts-expect-error\n      this._clock.runMicrotasks();\n    }\n  }\n\n  useRealTimers() {\n    if (this._fakingTime) {\n      this._clock.uninstall();\n\n      this._fakingTime = false;\n    }\n  }\n\n  useFakeTimers() {\n    if (!this._fakingTime) {\n      const toFake = Object.keys(this._fakeTimers.timers);\n      this._clock = this._fakeTimers.install({\n        loopLimit: this._maxLoops,\n        now: Date.now(),\n        target: this._global,\n        toFake\n      });\n      this._fakingTime = true;\n    }\n  }\n\n  reset() {\n    if (this._checkFakeTimers()) {\n      const {now} = this._clock;\n\n      this._clock.reset();\n\n      this._clock.setSystemTime(now);\n    }\n  }\n\n  setSystemTime(now) {\n    if (this._checkFakeTimers()) {\n      this._clock.setSystemTime(now);\n    }\n  }\n\n  getRealSystemTime() {\n    return Date.now();\n  }\n\n  getTimerCount() {\n    if (this._checkFakeTimers()) {\n      return this._clock.countTimers();\n    }\n\n    return 0;\n  }\n\n  _checkFakeTimers() {\n    if (!this._fakingTime) {\n      this._global.console.warn(\n        'A function to advance timers was called but the timers API is not ' +\n          'mocked with fake timers. Call `jest.useFakeTimers()` in this test or ' +\n          'enable fake timers globally by setting `\"timers\": \"fake\"` in the ' +\n          'configuration file\\nStack Trace:\\n' +\n          (0, _jestMessageUtil().formatStackTrace)(\n            new Error().stack,\n            this._config,\n            {\n              noStackTrace: false\n            }\n          )\n      );\n    }\n\n    return this._fakingTime;\n  }\n}\n\nexports.default = FakeTimers;\n"]},"metadata":{},"sourceType":"script"}