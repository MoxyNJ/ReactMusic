{"ast":null,"code":"var _jsxFileName = \"F:\\\\ReactTea\\\\React\\u8D44\\u6599-coderwhy\\\\hy-react-web-music\\\\src\\\\pages\\\\player\\\\app-play-panel\\\\c-cpns\\\\lyric-panel\\\\index.js\";\nimport React, { memo, useRef, useEffect } from \"react\";\nimport { useSelector, shallowEqual } from \"react-redux\";\nimport classNames from \"classnames\";\nimport { scrollTo } from \"@/utils/ui-helper\";\nimport { PannelWrapper } from \"./style\";\nexport default memo(function HYLyricPanel() {\n  const {\n    currentLyrics,\n    currentLyricIndex\n  } = useSelector(state => ({\n    currentLyrics: state.getIn([\"player\", \"currentLyrics\"]),\n    currentLyricIndex: state.getIn([\"player\", \"currentLyricIndex\"])\n  }), shallowEqual); // other hooks\n\n  const panelRef = useRef();\n  useEffect(() => {\n    if (currentLyricIndex > 0 && currentLyricIndex < 3) return; // -3：歌词、作者不需要高亮，第一行应该是歌词\n\n    scrollTo(panelRef.current, (currentLyricIndex - 3) * 32, 300);\n  }, [currentLyricIndex]);\n  return /*#__PURE__*/React.createElement(PannelWrapper, {\n    ref: panelRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"lrc-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }, currentLyrics.map((item, index) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: item.time,\n      className: classNames(\"lrc-item\", {\n        active: index === currentLyricIndex\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }\n    }, item.content);\n  })));\n});","map":{"version":3,"sources":["F:/ReactTea/React资料-coderwhy/hy-react-web-music/src/pages/player/app-play-panel/c-cpns/lyric-panel/index.js"],"names":["React","memo","useRef","useEffect","useSelector","shallowEqual","classNames","scrollTo","PannelWrapper","HYLyricPanel","currentLyrics","currentLyricIndex","state","getIn","panelRef","current","map","item","index","time","active","content"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,MAAtB,EAA8BC,SAA9B,QAA+C,OAA/C;AACA,SAASC,WAAT,EAAsBC,YAAtB,QAA0C,aAA1C;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,SAASC,QAAT,QAAyB,mBAAzB;AAEA,SAASC,aAAT,QAA8B,SAA9B;AAEA,eAAeP,IAAI,CAAC,SAASQ,YAAT,GAAwB;AAC1C,QAAM;AAAEC,IAAAA,aAAF;AAAiBC,IAAAA;AAAjB,MAAuCP,WAAW,CACrDQ,KAAD,KAAY;AACVF,IAAAA,aAAa,EAAEE,KAAK,CAACC,KAAN,CAAY,CAAC,QAAD,EAAW,eAAX,CAAZ,CADL;AAEVF,IAAAA,iBAAiB,EAAEC,KAAK,CAACC,KAAN,CAAY,CAAC,QAAD,EAAW,mBAAX,CAAZ;AAFT,GAAZ,CADsD,EAKtDR,YALsD,CAAxD,CAD0C,CAS1C;;AACA,QAAMS,QAAQ,GAAGZ,MAAM,EAAvB;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIQ,iBAAiB,GAAG,CAApB,IAAyBA,iBAAiB,GAAG,CAAjD,EAAoD,OADtC,CAEd;;AACAJ,IAAAA,QAAQ,CAACO,QAAQ,CAACC,OAAV,EAAmB,CAACJ,iBAAiB,GAAG,CAArB,IAA0B,EAA7C,EAAiD,GAAjD,CAAR;AACD,GAJQ,EAIN,CAACA,iBAAD,CAJM,CAAT;AAMA,sBACE,oBAAC,aAAD;AAAe,IAAA,GAAG,EAAEG,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGJ,aAAa,CAACM,GAAd,CAAkB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAClC,wBACE;AACE,MAAA,GAAG,EAAED,IAAI,CAACE,IADZ;AAEE,MAAA,SAAS,EAAEb,UAAU,CAAC,UAAD,EAAa;AAChCc,QAAAA,MAAM,EAAEF,KAAK,KAAKP;AADc,OAAb,CAFvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAMGM,IAAI,CAACI,OANR,CADF;AAUD,GAXA,CADH,CADF,CADF;AAkBD,CAnCkB,CAAnB","sourcesContent":["import React, { memo, useRef, useEffect } from \"react\";\nimport { useSelector, shallowEqual } from \"react-redux\";\nimport classNames from \"classnames\";\n\nimport { scrollTo } from \"@/utils/ui-helper\";\n\nimport { PannelWrapper } from \"./style\";\n\nexport default memo(function HYLyricPanel() {\n  const { currentLyrics, currentLyricIndex } = useSelector(\n    (state) => ({\n      currentLyrics: state.getIn([\"player\", \"currentLyrics\"]),\n      currentLyricIndex: state.getIn([\"player\", \"currentLyricIndex\"]),\n    }),\n    shallowEqual\n  );\n\n  // other hooks\n  const panelRef = useRef();\n  useEffect(() => {\n    if (currentLyricIndex > 0 && currentLyricIndex < 3) return;\n    // -3：歌词、作者不需要高亮，第一行应该是歌词\n    scrollTo(panelRef.current, (currentLyricIndex - 3) * 32, 300);\n  }, [currentLyricIndex]);\n\n  return (\n    <PannelWrapper ref={panelRef}>\n      <div className=\"lrc-content\">\n        {currentLyrics.map((item, index) => {\n          return (\n            <div\n              key={item.time}\n              className={classNames(\"lrc-item\", {\n                active: index === currentLyricIndex,\n              })}\n            >\n              {item.content}\n            </div>\n          );\n        })}\n      </div>\n    </PannelWrapper>\n  );\n});\n"]},"metadata":{},"sourceType":"module"}